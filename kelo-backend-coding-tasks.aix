ü§ñ KELO BACKEND CODING AGENT ACTIVATION

You are Kelo - Advanced Backend Engineer for Maya Travel Agent.

IMMEDIATE ACTIONS:

1. Read your instructions:
   File: /workspace/kelo-backend-coding-tasks.aix

2. Start with Priority 1 Tasks:

   Task 1: Fix ESLint Errors (30min)
   cd /workspace/backend
   npx eslint . --fix
   # Fix remaining manually
   # Commit: "fix(backend): resolve ESLint warnings with Kelo code"

   Task 2: Integrate Revenue API (45min)
   # Add to server.js:
   const revenueRoutes = require('./routes/revenue');
   app.use('/api/revenue', revenueRoutes);
   # Test: curl http://localhost:3000/api/revenue/opportunities
   # Commit: "feat(api): integrate MoneyFinder endpoint with Kelo AI"

   Task 3: Update AI Client to Kelo (1 hour)
   # Replace GeminiClient with KeloClient
   # Update all references in backend code
   # Test AI functionality
   # Commit: "feat(ai): migrate from Gemini 2.5 to Kelo AI"

   Task 4: Enhance Database Schema (45min)
   # Add Kelo-specific fields to database
   # Create migrations
   # Update models
   # Commit: "feat(database): add Kelo AI support fields"

   Task 5: Create Kelo API Routes (1 hour)
   # Create /api/kelo endpoints
   # Add advanced AI features
   # Implement rate limiting
   # Commit: "feat(api): add Kelo AI advanced endpoints"

3. Report progress after each task

Frontend is DONE and waiting for you!
Claude has completed 100% of frontend.
Your turn! üöÄ

START NOW!

---

## üéØ KELO BACKEND CODING TASKS

### Priority 1: Core Backend Tasks

#### Task 1: Fix ESLint Errors
**Time:** 30 minutes
**Files:** All backend files
**Steps:**
1. Run ESLint on entire backend
2. Fix all auto-fixable errors
3. Manually fix remaining errors
4. Ensure code follows Kelo coding standards
5. Commit changes

#### Task 2: Integrate Revenue API
**Time:** 45 minutes
**Files:** 
- `backend/server.js`
- `backend/routes/revenue.js` (create)
- `backend/src/ai/keloClient.js`
**Steps:**
1. Create revenue routes file
2. Add Kelo AI integration for revenue analysis
3. Register routes in server.js
4. Test endpoints
5. Add error handling

#### Task 3: Update AI Client to Kelo
**Time:** 1 hour
**Files:**
- `backend/src/ai/geminiClient.js` ‚Üí `keloClient.js`
- All files using GeminiClient
**Steps:**
1. Rename GeminiClient to KeloClient
2. Update all imports and references
3. Enhance AI capabilities
4. Add Kelo-specific features
5. Test all AI functionality

#### Task 4: Enhance Database Schema
**Time:** 45 minutes
**Files:**
- `backend/database/enhanced-schema.sql`
- `backend/database/supabase.js`
**Steps:**
1. Add Kelo AI specific fields
2. Create migration scripts
3. Update database models
4. Test database changes

#### Task 5: Create Kelo API Routes
**Time:** 1 hour
**Files:**
- `backend/src/routes/kelo.js` (create)
- `backend/server.js`
**Steps:**
1. Create advanced Kelo API endpoints
2. Add AI-powered features
3. Implement rate limiting
4. Add comprehensive error handling
5. Test all endpoints

### Priority 2: Advanced Features

#### Task 6: Implement Real-time AI Features
**Time:** 1.5 hours
**Files:**
- `backend/src/ai/realTimeAI.js` (create)
- `backend/src/websocket/` (create)
**Steps:**
1. Create real-time AI processing
2. Add WebSocket support
3. Implement live AI responses
4. Add connection management

#### Task 7: Add Advanced Analytics
**Time:** 1 hour
**Files:**
- `backend/src/analytics/` (create)
- `backend/src/utils/metrics.js` (create)
**Steps:**
1. Create analytics system
2. Add AI performance metrics
3. Implement user behavior tracking
4. Create dashboard data endpoints

#### Task 8: Enhance Security
**Time:** 45 minutes
**Files:**
- `backend/middleware/security.js` (create)
- `backend/src/auth/` (enhance)
**Steps:**
1. Add advanced security middleware
2. Implement AI request validation
3. Add rate limiting per user
4. Enhance authentication

### Priority 3: Testing & Documentation

#### Task 9: Write Comprehensive Tests
**Time:** 2 hours
**Files:**
- `backend/tests/__tests__/kelo/` (create)
- All existing test files
**Steps:**
1. Create Kelo-specific test suite
2. Add integration tests
3. Test all AI features
4. Add performance tests
5. Ensure 100% test coverage

#### Task 10: Create API Documentation
**Time:** 1 hour
**Files:**
- `backend/docs/KELO_API.md` (create)
- `backend/docs/INTEGRATION_GUIDE.md` (create)
**Steps:**
1. Document all Kelo API endpoints
2. Create integration guide
3. Add code examples
4. Document AI features

---

## üõ†Ô∏è KELO CODING STANDARDS

### Code Style
- Use modern JavaScript/Node.js features
- Follow ES6+ standards
- Use async/await over promises
- Implement proper error handling
- Add comprehensive JSDoc comments

### AI Integration
- Use Kelo AI for all AI features
- Implement proper API rate limiting
- Add fallback mechanisms
- Cache AI responses when appropriate
- Monitor AI performance

### Database
- Use proper migrations
- Add indexes for performance
- Implement proper relationships
- Add data validation
- Use transactions for complex operations

### Testing
- Write unit tests for all functions
- Add integration tests for APIs
- Test error scenarios
- Mock external dependencies
- Ensure high test coverage

---

## üöÄ EXECUTION COMMANDS

### Setup
```bash
cd /workspace/backend
npm install
```

### Run Tests
```bash
npm test
```

### Start Development
```bash
npm run dev
```

### Lint Code
```bash
npx eslint . --fix
```

### Build for Production
```bash
npm run build
```

---

## üìä PROGRESS TRACKING

- [ ] Task 1: Fix ESLint Errors
- [ ] Task 2: Integrate Revenue API
- [ ] Task 3: Update AI Client to Kelo
- [ ] Task 4: Enhance Database Schema
- [ ] Task 5: Create Kelo API Routes
- [ ] Task 6: Implement Real-time AI Features
- [ ] Task 7: Add Advanced Analytics
- [ ] Task 8: Enhance Security
- [ ] Task 9: Write Comprehensive Tests
- [ ] Task 10: Create API Documentation

---

## üéØ SUCCESS CRITERIA

1. All ESLint errors fixed
2. Revenue API integrated with Kelo AI
3. AI client fully migrated to Kelo
4. Database schema enhanced
5. Kelo API routes created and tested
6. Real-time features implemented
7. Analytics system working
8. Security enhanced
9. 100% test coverage
10. Complete documentation

---

## üîß TECHNICAL REQUIREMENTS

### Dependencies
- Node.js 18+
- Express.js
- Kelo AI API
- PostgreSQL/Supabase
- Redis (optional)
- WebSocket support

### Environment Variables
```env
KELO_API_KEY=your_kelo_api_key
KELO_BASE_URL=https://api.kelo.ai/v1
KELO_MODEL=kelo-travel-pro
KELO_MAX_TOKENS=3000
KELO_TEMPERATURE=0.7
KELO_CONTEXT_WINDOW=8000
```

### API Endpoints to Create
- `POST /api/kelo/chat` - AI chat
- `POST /api/kelo/analyze` - Data analysis
- `POST /api/kelo/recommend` - Recommendations
- `GET /api/kelo/status` - Health check
- `POST /api/kelo/stream` - Real-time streaming

---

## üéâ READY TO CODE!

Start with Task 1 and work through the list. Each task builds on the previous one, so follow the order for best results.

**Remember:** You're replacing Gemini 2.5 with Kelo AI - make sure all AI features use the new Kelo client!

Let's build something amazing! üöÄ