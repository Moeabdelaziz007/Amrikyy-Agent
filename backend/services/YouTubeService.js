
const fs = require('fs').promises;
const path = require('path');
const { convertToWebpage } = require('../utils/youtube2webpage');

// This is a placeholder for the actual Gemini client.
// In a real application, this would be initialized and passed to the service.
const geminiClient = {
  async generateContent(prompt) {
    console.log('--- FAKE GEMINI CALL ---');
    console.log('Prompt:', prompt);
    const fakeAnalysis = `
      <h3>Video Summary</h3>
      <p>This is a summary of the video generated by the AI. The video discusses important topics and provides deep insights.</p>
      <h3>Key Topics</h3>
      <ul>
        <li>Topic 1: An important point discussed.</li>
        <li>Topic 2: Another key takeaway.</li>
        <li>Topic 3: A final, crucial insight.</li>
      </ul>
    `;
    return Promise.resolve({ response: { text: () => fakeAnalysis } });
  }
};

class YouTubeService {
  constructor(geminiClient) {
    // In a real app, you'd pass the initialized Gemini client here
    this.geminiClient = geminiClient;
    this.outputDir = path.join(__dirname, '../.. ', 'public', 'youtube-pages');
  }

  /**
   * Analyzes the transcript with the Gemini API.
   * @private
   * @param {string} transcript The video transcript.
   * @returns {Promise<string>} The AI-generated analysis as HTML.
   */
  async _analyzeTranscriptWithGemini(transcript) {
    if (!transcript || transcript === 'No transcript available.') {
      return '<p>No transcript was available to analyze.</p>';
    }

    const prompt = `Please analyze the following video transcript and provide a summary and key topics in HTML format. Transcript:

${transcript}`;

    try {
      const result = await this.geminiClient.generateContent(prompt);
      return result.response.text();
    } catch (error) {
      console.error('Error analyzing transcript with Gemini:', error);
      return '<p>Error analyzing transcript.</p>';
    }
  }

  /**
   * Processes a YouTube video, generates a webpage with transcript and screenshots,
   * analyzes the transcript with AI, and injects the analysis into the webpage.
   * @param {string} videoUrl The URL of the YouTube video.
   * @returns {Promise<string>} The path to the final, enhanced HTML file.
   */
  async processVideo(videoUrl) {
    await fs.mkdir(this.outputDir, { recursive: true });

    // 1. Generate the initial webpage with transcript and screenshots
    const { htmlPath, transcript } = await convertToWebpage(videoUrl, this.outputDir);

    // 2. Analyze the transcript with Gemini
    console.log('[YouTubeService] Analyzing transcript with AI...');
    const aiAnalysisHtml = await this._analyzeTranscriptWithGemini(transcript);

    // 3. Inject the AI analysis into the HTML file
    console.log(`[YouTubeService] Injecting AI analysis into ${htmlPath}...`);
    const originalHtml = await fs.readFile(htmlPath, 'utf8');
    const finalHtml = originalHtml.replace(
      '<!-- AI analysis will be injected here -->',
      aiAnalysisHtml
    );
    await fs.writeFile(htmlPath, finalHtml);

    console.log(`[YouTubeService] Successfully enhanced HTML with AI analysis: ${htmlPath}`);

    return htmlPath;
  }
}

// Export a singleton instance of the service with the fake client
module.exports = new YouTubeService(geminiClient);
