#!/usr/bin/env node

/**
 * Maya Voice-First Multi-Agent System - Main Entry Point
 * Starts the complete voice-enabled travel assistant system
 */

const winston = require('winston');
const VoiceTelegramBot = require('./VoiceTelegramBot');
const VoiceProcessor = require('./VoiceProcessor');
const MasterOrchestrator = require('../orchestrator/MasterOrchestrator');

// Configure logging
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.colorize(),
    winston.format.printf(({ timestamp, level, message, ...meta }) => {
      return `${timestamp} [${level}] ${message} ${Object.keys(meta).length ? JSON.stringify(meta, null, 2) : ''}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logs/maya-voice-system.log' })
  ]
});

class MayaVoiceSystem {
  constructor() {
    this.logger = logger;
    this.components = {
      voiceProcessor: null,
      orchestrator: null,
      telegramBot: null
    };
    this.isRunning = false;
  }

  async initialize() {
    try {
      this.logger.info('üöÄ Starting Maya Voice-First Multi-Agent System...');
      
      // Check environment variables
      this.checkEnvironmentVariables();
      
      // Initialize components
      await this.initializeComponents();
      
      // Set up graceful shutdown
      this.setupGracefulShutdown();
      
      this.logger.info('‚úÖ Maya Voice System initialized successfully');
      this.isRunning = true;
      
      // Display system status
      this.displaySystemStatus();
      
    } catch (error) {
      this.logger.error('‚ùå Failed to initialize Maya Voice System', { error: error.message });
      process.exit(1);
    }
  }

  checkEnvironmentVariables() {
    const required = [
      'TELEGRAM_BOT_TOKEN',
      'CARTESIA_API_KEY'
    ];

    const missing = required.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      this.logger.error('‚ùå Missing required environment variables:', missing);
      process.exit(1);
    }
    
    this.logger.info('‚úÖ Environment variables validated');
  }

  async initializeComponents() {
    this.logger.info('üîß Initializing system components...');
    
    // Initialize Voice Processor
    this.logger.info('üéôÔ∏è Initializing Voice Processor...');
    this.components.voiceProcessor = new VoiceProcessor();
    await this.components.voiceProcessor.initializeSystem();
    
    // Initialize Master Orchestrator
    this.logger.info('üß† Initializing Master Orchestrator...');
    this.components.orchestrator = new MasterOrchestrator();
    await this.components.orchestrator.initializeSystem();
    
    // Initialize Telegram Bot
    this.logger.info('üì± Initializing Voice Telegram Bot...');
    this.components.telegramBot = new VoiceTelegramBot();
    await this.components.telegramBot.start();
    
    this.logger.info('‚úÖ All components initialized');
  }

  setupGracefulShutdown() {
    const shutdown = async (signal) => {
      this.logger.info(`üõë Received ${signal}, shutting down gracefully...`);
      this.isRunning = false;
      
      try {
        if (this.components.telegramBot) {
          await this.components.telegramBot.stop();
        }
        
        this.logger.info('‚úÖ Graceful shutdown completed');
        process.exit(0);
      } catch (error) {
        this.logger.error('‚ùå Error during shutdown', { error: error.message });
        process.exit(1);
      }
    };

    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));
  }

  displaySystemStatus() {
    const status = `
üéôÔ∏è MAYA VOICE-FIRST MULTI-AGENT SYSTEM üéôÔ∏è
=============================================

ü§ñ Specialized Agents:
   üé´ Luna - Trip Architect & Itinerary Designer
   üí∞ Karim - Financial Strategist & Budget Optimizer
   üó∫Ô∏è Layla - Cultural Expert & Destination Specialist
   üìû Amira - Customer Care & Crisis Manager
   üí≥ Tariq - Transaction Security Expert
   üîç Zara - Information Intelligence Expert
   üìä Insights - Performance Analytics Specialist
   üîÑ Evolve - Continuous Improvement Specialist
   üêõ Fix - System Health & Error Resolution Specialist

üéôÔ∏è Voice Capabilities:
   ‚úÖ Speech-to-Text: Whisper Large v3 with fallback engines
   ‚úÖ Text-to-Speech: Cartesia with emotion modulation
   ‚úÖ Voice Cloning: Personalized voices for each agent
   ‚úÖ Multilingual: Arabic, English, French, Spanish, German, Italian
   ‚úÖ Real-time Processing: WebSocket streaming support

üîß System Components:
   ‚úÖ Voice Processing Engine
   ‚úÖ Multi-Agent Orchestrator
   ‚úÖ Telegram Bot Integration
   ‚úÖ WebSocket Communication
   ‚úÖ MCP Tools Integration

üì± Active Services:
   ‚úÖ Telegram Bot (@your_bot_username)
   üîÑ WhatsApp Bot (coming soon)
   üîÑ Web Voice Interface (coming soon)

üåç Supported Languages:
   üá∏üá¶ Arabic (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©) - Primary
   üá∫üá∏ English
   üá´üá∑ French (Fran√ßais)
   üá™üá∏ Spanish (Espa√±ol)
   üá©üá™ German (Deutsch)
   üáÆüáπ Italian (Italiano)

üéØ Ready to help with:
   ‚Ä¢ Voice-first travel planning
   ‚Ä¢ Multi-agent collaboration
   ‚Ä¢ Cultural insights and recommendations
   ‚Ä¢ Budget optimization
   ‚Ä¢ Real-time assistance
   ‚Ä¢ Multilingual conversations

System is now running and ready to assist! üöÄ
=============================================`;

    console.log(status);
    this.logger.info('Maya Voice System is now running and ready to assist users');
  }

  async getSystemHealth() {
    try {
      const health = {
        system: 'healthy',
        components: {},
        timestamp: new Date().toISOString()
      };

      if (this.components.voiceProcessor) {
        health.components.voiceProcessor = await this.components.voiceProcessor.healthCheck();
      }

      if (this.components.orchestrator) {
        health.components.orchestrator = this.components.orchestrator.getSystemHealth();
      }

      if (this.components.telegramBot) {
        health.components.telegramBot = this.components.telegramBot.getStats();
      }

      return health;
    } catch (error) {
      this.logger.error('Error getting system health', { error: error.message });
      return {
        system: 'error',
        error: error.message,
        timestamp: new Date().toISOString()
      };
    }
  }
}

// Start the system if this file is run directly
if (require.main === module) {
  const system = new MayaVoiceSystem();
  
  system.initialize().catch((error) => {
    console.error('‚ùå Failed to start Maya Voice System:', error);
    process.exit(1);
  });
}

module.exports = MayaVoiceSystem;

