# ============================================================================
# AMRIKYY BACKEND - Environment Variables Template
# ============================================================================
# 
# INSTRUCTIONS:
# 1. Copy this file to `.env` in the backend directory
#    cp env.template .env
# 2. Replace all placeholder values with your actual credentials
# 3. NEVER commit the .env file to git (it's in .gitignore)
# 4. Keep this template updated when adding new env vars
#
# VALIDATION:
# Run: node -e "require('dotenv').config(); console.log('âœ… ENV loaded')"
#
# ============================================================================

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Server port (default: 5000)
PORT=5000

# Environment: development | staging | production
NODE_ENV=development

# Application URL (used for redirects, webhooks)
APP_URL=http://localhost:5000

# ============================================================================
# DATABASE - Supabase PostgreSQL
# ============================================================================
# Get from: https://app.supabase.com/project/_/settings/api

# Supabase project URL
SUPABASE_URL=https://your-project-id.supabase.co

# Public anonymous key (safe for client-side)
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# Service role key (KEEP SECRET - full database access)
SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# ============================================================================
# TELEGRAM INTEGRATION
# ============================================================================
# Get bot token from: https://t.me/BotFather

# Telegram bot token (format: 1234567890:ABCdefGHIjklMNOpqrsTUVwxyz)
TELEGRAM_BOT_TOKEN=1234567890:REPLACE_WITH_YOUR_BOT_TOKEN

# Telegram webhook URL (for payment notifications)
TELEGRAM_WEBHOOK_URL=https://yourdomain.com/api/payment/telegram-webhook

# Telegram Mini App URLs
WEB_APP_URL=https://yourdomain.com
TELEGRAM_MINI_APP_URL=https://yourdomain.com

# Frontend URL (for CORS and redirects)
FRONTEND_URL=http://localhost:3000

# ============================================================================
# AI - Z.ai GLM-4.6 Configuration
# ============================================================================
# Get API key from: https://platform.z.ai

# Z.ai API key
ZAI_API_KEY=your_zai_api_key_here

# Z.ai API base URL (default: https://api.z.ai/api/paas/v4)
ZAI_API_BASE_URL=https://api.z.ai/api/paas/v4

# Model name (glm-4.6 recommended for multilingual support)
ZAI_MODEL=glm-4.6

# Max tokens per response (100-8000)
ZAI_MAX_TOKENS=2000

# Temperature for response creativity (0.0-1.0)
ZAI_TEMPERATURE=0.7

# ============================================================================
# PAYMENT PROVIDERS
# ============================================================================

# --- Stripe Configuration ---
# Get from: https://dashboard.stripe.com/apikeys

# Stripe secret key (KEEP SECRET)
STRIPE_SECRET_KEY=sk_test_51...

# Stripe publishable key (safe for client-side)
STRIPE_PUBLISHABLE_KEY=pk_test_51...

# Stripe webhook signing secret (for webhook verification)
STRIPE_WEBHOOK_SECRET=whsec_...

# --- PayPal Configuration ---
# Get from: https://developer.paypal.com/dashboard

# PayPal client ID
PAYPAL_CLIENT_ID=your_paypal_client_id_here

# PayPal client secret (KEEP SECRET)
PAYPAL_CLIENT_SECRET=your_paypal_client_secret_here

# PayPal mode: sandbox | live
PAYPAL_MODE=sandbox

# ============================================================================
# SECURITY & AUTHENTICATION
# ============================================================================

# JWT secret for token signing (generate with: openssl rand -hex 64)
# Example: openssl rand -hex 64
JWT_SECRET=REPLACE_WITH_64_CHARACTER_HEX_STRING

# Encryption key for sensitive data (generate with: openssl rand -hex 32)
# Example: openssl rand -hex 32
ENCRYPTION_KEY=REPLACE_WITH_32_CHARACTER_HEX_STRING

# Session secret (generate with: openssl rand -hex 32)
SESSION_SECRET=REPLACE_WITH_32_CHARACTER_HEX_STRING

# ============================================================================
# CORS & SECURITY
# ============================================================================

# Allowed CORS origins (comma-separated for multiple)
CORS_ORIGIN=http://localhost:3000,http://localhost:5173

# Rate limiting window (milliseconds, default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Max requests per window
RATE_LIMIT_MAX_REQUESTS=100

# ============================================================================
# REDIS - Caching & Sessions
# ============================================================================
# Local: redis://localhost:6379
# Cloud: Get from Redis Cloud, Upstash, or Railway

# Full Redis connection URL
REDIS_URL=redis://localhost:6379

# Or individual components:
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_TLS=false

# ============================================================================
# CONFLUENT CLOUD - Event Streaming (Kafka)
# ============================================================================
# Get from: https://confluent.cloud
# Optional - only needed for event-driven features

CONFLUENT_BOOTSTRAP_SERVERS=pkc-xxxxx.us-east-1.aws.confluent.cloud:9092
CONFLUENT_SASL_USERNAME=your_api_key
CONFLUENT_SASL_PASSWORD=your_api_secret
CONFLUENT_GROUP_ID=amrikyy-service-bus

# ============================================================================
# DATA INTEGRATION PLATFORMS (Optional)
# ============================================================================

# --- Fivetran (ETL) ---
# Get from: https://fivetran.com/account/settings/api

FIVETRAN_API_KEY=your_fivetran_api_key
FIVETRAN_API_SECRET=your_fivetran_api_secret
FIVETRAN_ACCOUNT_ID=your_account_id

# --- Dataiku (ML Platform) ---
# Get from your Dataiku instance admin panel

DATAIKU_BASE_URL=https://your-dataiku-instance.com
DATAIKU_API_KEY=your_dataiku_api_key
DATAIKU_PROJECT_KEY=AMRIKYY_TRAVEL_AGENT

# --- Collibra (Data Governance) ---
# Get from your Collibra instance

COLLIBRA_BASE_URL=https://your-instance.collibra.com
COLLIBRA_USERNAME=your_username
COLLIBRA_PASSWORD=your_password

# ============================================================================
# TRAVEL APIs (Optional - Enhanced Features)
# ============================================================================

# --- Amadeus (Flight & Hotel API) ---
# Get from: https://developers.amadeus.com

AMADEUS_API_KEY=your_amadeus_api_key
AMADEUS_API_SECRET=your_amadeus_api_secret
AMADEUS_BASE_URL=https://test.api.amadeus.com

# --- Sabre (GDS for travel booking) ---
# Get from: https://developer.sabre.com

SABRE_CLIENT_ID=your_sabre_client_id
SABRE_CLIENT_SECRET=your_sabre_client_secret
SABRE_BASE_URL=https://api.cert.platform.sabre.com

# ============================================================================
# MONITORING & ANALYTICS (Optional but Recommended)
# ============================================================================

# --- Sentry (Error Tracking) ---
# Get from: https://sentry.io

SENTRY_DSN=https://your_sentry_dsn_here
SENTRY_ENVIRONMENT=development
SENTRY_TRACES_SAMPLE_RATE=0.1

# --- Google Analytics ---

GA_TRACKING_ID=UA-XXXXXXXXX-X

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

# Log level: error | warn | info | debug | trace
LOG_LEVEL=info

# Log to file: true | false
LOG_TO_FILE=true

# Log directory (relative to backend/)
LOG_DIR=./logs

# Log format: json | pretty
LOG_FORMAT=pretty

# ============================================================================
# CRYPTO PAYMENT SYSTEM (Optional)
# ============================================================================

# Crypto payment provider API keys
CRYPTO_PAYMENT_API_KEY=your_crypto_api_key
CRYPTO_PAYMENT_SECRET=your_crypto_secret

# Supported networks: ethereum, polygon, binance_smart_chain
CRYPTO_NETWORKS=ethereum,polygon

# Wallet addresses for receiving payments
ETH_WALLET_ADDRESS=0x...
POLYGON_WALLET_ADDRESS=0x...

# ============================================================================
# MINI-ALADDIN TRADING SYSTEM (Optional)
# ============================================================================

# Enable automated trading: true | false (USE WITH CAUTION!)
ALADDIN_AUTO_TRADE=false

# Initial trading capital (USD)
ALADDIN_INITIAL_CAPITAL=10000

# Risk tolerance: low | medium | high
ALADDIN_RISK_TOLERANCE=medium

# Trading strategies (comma-separated): arbitrage,pattern,affiliate
ALADDIN_STRATEGIES=arbitrage,pattern,affiliate

# Maximum risk per trade (percentage of capital)
ALADDIN_MAX_RISK_PERCENT=2

# Minimum profit threshold for arbitrage (percentage)
ALADDIN_MIN_ARBITRAGE_PROFIT=0.5

# --- Exchange API Keys (for real trading) ---
# BINANCE
BINANCE_API_KEY=your_binance_api_key
BINANCE_API_SECRET=your_binance_secret

# COINBASE
COINBASE_API_KEY=your_coinbase_api_key
COINBASE_API_SECRET=your_coinbase_secret

# KRAKEN
KRAKEN_API_KEY=your_kraken_api_key
KRAKEN_API_SECRET=your_kraken_secret

# ============================================================================
# DEVELOPMENT & DEBUGGING
# ============================================================================

# Enable debug mode: true | false
DEBUG=false

# Enable verbose logging: true | false
VERBOSE=false

# Mock external APIs (for testing): true | false
MOCK_APIS=false

# Skip authentication (development only): true | false
SKIP_AUTH=false

# ============================================================================
# ADVANCED FEATURES
# ============================================================================

# gRPC server port
GRPC_PORT=50051

# Prometheus metrics port
METRICS_PORT=9090

# WebSocket port
WEBSOCKET_PORT=8080

# Health check interval (milliseconds)
HEALTH_CHECK_INTERVAL=60000

# ============================================================================
# QUICK SETUP COMMANDS
# ============================================================================
#
# Generate secure secrets:
#   JWT_SECRET:       openssl rand -hex 64
#   ENCRYPTION_KEY:   openssl rand -hex 32
#   SESSION_SECRET:   openssl rand -hex 32
#
# Test environment loading:
#   node -e "require('dotenv').config(); console.log('PORT:', process.env.PORT)"
#
# Validate all required vars:
#   npm run env:validate
#
# ============================================================================
# SECURITY CHECKLIST
# ============================================================================
#
# âœ… Never commit .env file
# âœ… Use strong random secrets (64+ characters)
# âœ… Rotate secrets regularly (every 90 days)
# âœ… Use different secrets for dev/staging/prod
# âœ… Store production secrets in secure vault (AWS Secrets Manager, etc.)
# âœ… Limit API key permissions to minimum required
# âœ… Enable 2FA on all service accounts
# âœ… Monitor API usage for unusual patterns
# âœ… Use environment-specific API keys (test keys for dev)
#
# ============================================================================

