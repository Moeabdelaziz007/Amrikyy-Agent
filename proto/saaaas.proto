syntax = "proto3";

package saaaas;

// ============================================================================
// SAAAAS - Super AI Automation Agentik As Service
// Complete gRPC-based cognitive infrastructure
// ============================================================================

// ============================================================================
// E-CMW (Enhanced Cognitive Mesh Weaver) - The Central Brain
// ============================================================================

service CognitiveOrchestrator {
  // Main orchestration - takes user intent, returns complete plan
  rpc OrchestratePlan(IntentRequest) returns (stream OrchestrationStep);
  
  // Multi-agent collaboration
  rpc CollaborateAgents(stream AgentMessage) returns (stream CollaborationResult);
  
  // Dynamic workflow generation
  rpc GenerateWorkflow(WorkflowRequest) returns (WorkflowBlueprint);
  
  // Execute workflow with real-time updates
  rpc ExecuteWorkflow(WorkflowBlueprint) returns (stream ExecutionStep);
  
  // Mesh health and status
  rpc GetMeshStatus(Empty) returns (MeshStatus);
}

message IntentRequest {
  string user_id = 1;
  string intent = 2;
  map<string, string> context = 3;
  repeated string required_agents = 4;
  int32 priority = 5;
}

message OrchestrationStep {
  string step_id = 1;
  int32 step_number = 2;
  int32 total_steps = 3;
  string paradigm = 4;  // Which quantum paradigm is active
  string action = 5;
  string agent_assigned = 6;
  map<string, string> data = 7;
  int64 timestamp = 8;
  string status = 9;  // "in_progress", "completed", "failed"
}

message AgentMessage {
  string from_agent = 1;
  string to_agent = 2;
  string message_type = 3;
  bytes payload = 4;
  int64 timestamp = 5;
}

message CollaborationResult {
  repeated string agents_involved = 1;
  string synthesized_output = 2;
  map<string, string> agent_contributions = 3;
  bool success = 4;
}

message WorkflowRequest {
  string goal = 1;
  repeated string available_services = 2;
  map<string, string> constraints = 3;
}

message WorkflowBlueprint {
  string workflow_id = 1;
  repeated WorkflowNode nodes = 2;
  repeated WorkflowEdge edges = 3;
  map<string, string> variables = 4;
}

message WorkflowNode {
  string node_id = 1;
  string service_name = 2;
  string action = 3;
  map<string, string> params = 4;
}

message WorkflowEdge {
  string from_node = 1;
  string to_node = 2;
  string condition = 3;
}

message ExecutionStep {
  string workflow_id = 1;
  string node_id = 2;
  string status = 3;
  bytes result = 4;
  string error = 5;
  int64 timestamp = 6;
}

message MeshStatus {
  int32 active_agents = 1;
  int32 active_workflows = 2;
  int32 total_connections = 3;
  float cpu_usage = 4;
  float memory_usage = 5;
  map<string, ServiceHealth> services = 6;
}

message ServiceHealth {
  string status = 1;
  int64 uptime_seconds = 2;
  int32 request_count = 3;
  float avg_response_time_ms = 4;
}

message Empty {}

// ============================================================================
// Quantum Nexus - 6 Quantum Paradigms
// ============================================================================

service QuantumNexus {
  // Paradigm 1: Intent Classification
  rpc ClassifyIntent(IntentInput) returns (ClassifiedIntent);
  
  // Paradigm 2: Workflow Discovery
  rpc DiscoverWorkflow(WorkflowQuery) returns (stream WorkflowOption);
  
  // Paradigm 3: Dynamic Composition
  rpc ComposeDynamic(CompositionRequest) returns (stream CompositionUpdate);
  
  // Paradigm 4: Execution Engine
  rpc Execute(ExecutionRequest) returns (stream ExecutionEvent);
  
  // Paradigm 5: Continuous Learning
  rpc LearnFromExecution(LearningData) returns (LearningInsight);
  
  // Paradigm 6: Autonomous Decision
  rpc MakeDecision(DecisionRequest) returns (Decision);
  
  // Get paradigm performance
  rpc GetParadigmStats(Empty) returns (ParadigmStats);
}

message IntentInput {
  string text = 1;
  map<string, string> context = 2;
}

message ClassifiedIntent {
  string primary_intent = 1;
  repeated string secondary_intents = 2;
  map<string, float> confidence_scores = 3;
  repeated string required_capabilities = 4;
}

message WorkflowQuery {
  ClassifiedIntent intent = 1;
  repeated string available_services = 2;
}

message WorkflowOption {
  string workflow_id = 1;
  string description = 2;
  float feasibility_score = 3;
  int32 estimated_duration_seconds = 4;
  repeated string services_required = 5;
}

message CompositionRequest {
  WorkflowOption selected_workflow = 1;
  map<string, string> parameters = 2;
}

message CompositionUpdate {
  string component_id = 1;
  string component_type = 2;
  string status = 3;
  bytes configuration = 4;
}

message ExecutionRequest {
  string workflow_id = 1;
  bytes composed_workflow = 2;
  map<string, string> runtime_params = 3;
}

message ExecutionEvent {
  string event_type = 1;
  string component_id = 2;
  bytes data = 3;
  int64 timestamp = 4;
}

message LearningData {
  string workflow_id = 1;
  bool success = 2;
  int64 execution_time_ms = 3;
  map<string, float> performance_metrics = 4;
  string user_feedback = 5;
}

message LearningInsight {
  repeated string improvements = 1;
  map<string, float> updated_weights = 2;
  string next_optimization = 3;
}

message DecisionRequest {
  string decision_type = 1;
  repeated DecisionOption options = 2;
  map<string, string> context = 3;
}

message DecisionOption {
  string option_id = 1;
  string description = 2;
  map<string, float> scores = 3;
}

message Decision {
  string chosen_option = 1;
  string reasoning = 2;
  float confidence = 3;
  repeated string alternative_options = 4;
}

message ParadigmStats {
  map<string, ParadigmPerformance> paradigms = 1;
  int64 total_requests = 2;
  float overall_success_rate = 3;
}

message ParadigmPerformance {
  string name = 1;
  int64 invocations = 2;
  float success_rate = 3;
  float avg_duration_ms = 4;
}

// ============================================================================
// Universal Kit Generator
// ============================================================================

service UniversalKitGenerator {
  // Generate any kit type
  rpc GenerateKit(KitRequest) returns (stream KitGenerationStep);
  
  // Get available kit templates
  rpc GetKitTemplates(Empty) returns (KitTemplates);
  
  // Deploy generated kit
  rpc DeployKit(DeployKitRequest) returns (stream DeploymentProgress);
  
  // Monitor active kits
  rpc MonitorKits(Empty) returns (stream KitHealthUpdate);
  
  // Generate API keys for kit
  rpc GenerateAPIKeys(KeyRequest) returns (APIKeySet);
}

message KitRequest {
  string kit_type = 1;  // "MCPKit", "ChatKit", "TravelKit", etc.
  string custom_name = 2;
  map<string, string> configuration = 3;
  repeated string features = 4;
}

message KitGenerationStep {
  string step = 1;
  int32 progress_percent = 2;
  string status = 3;
  bytes generated_config = 4;
}

message KitTemplates {
  repeated KitTemplate templates = 1;
}

message KitTemplate {
  string type = 1;
  string name = 2;
  string description = 3;
  repeated string features = 4;
  repeated string required_apis = 5;
}

message DeployKitRequest {
  string kit_id = 1;
  bytes kit_config = 2;
  map<string, string> environment = 3;
}

message DeploymentProgress {
  string stage = 1;
  int32 progress_percent = 2;
  string status = 3;
  string endpoint = 4;
}

message KitHealthUpdate {
  string kit_id = 1;
  string status = 2;
  map<string, string> metrics = 3;
  int64 timestamp = 4;
}

message KeyRequest {
  string kit_id = 1;
  repeated string key_types = 2;
}

message APIKeySet {
  string kit_id = 1;
  repeated APIKey keys = 2;
}

message APIKey {
  string name = 1;
  string value = 2;
  string type = 3;
  int64 created_at = 4;
}

// ============================================================================
// Agent DNA Factory
// ============================================================================

service AgentDNAFactory {
  // Create new agent DNA
  rpc CreateDNA(DNACreationRequest) returns (AgentDNA);
  
  // Evolve agent based on performance
  rpc EvolveAgent(stream PerformanceData) returns (stream DNAEvolution);
  
  // Clone existing agent
  rpc CloneAgent(CloneRequest) returns (AgentDNA);
  
  // Mutate agent DNA (for experimentation)
  rpc MutateAgent(MutationRequest) returns (AgentDNA);
  
  // Get DNA presets
  rpc GetPresets(Empty) returns (DNAPresets);
  
  // Breed two agents (combine DNA)
  rpc BreedAgents(BreedRequest) returns (AgentDNA);
}

message DNACreationRequest {
  string name = 1;
  string specialization = 2;
  Personality personality = 3;
  Skills skills = 4;
  Behavior behavior = 5;
  repeated string domain_expertise = 6;
}

message AgentDNA {
  string dna_id = 1;
  string name = 2;
  string specialization = 3;
  Personality personality = 4;
  Skills skills = 5;
  Behavior behavior = 6;
  DNAScore score = 7;
  string system_prompt = 8;
  int64 created_at = 9;
  int32 generation = 10;
}

message Personality {
  int32 analytical = 1;
  int32 creative = 2;
  int32 empathetic = 3;
  int32 logical = 4;
  int32 intuitive = 5;
  int32 assertive = 6;
}

message Skills {
  int32 coding = 1;
  int32 communication = 2;
  int32 problem_solving = 3;
  int32 leadership = 4;
  int32 learning = 5;
  int32 cultural = 6;
}

message Behavior {
  int32 decision_speed = 1;
  int32 risk_tolerance = 2;
  int32 work_style = 3;
  int32 detail_level = 4;
}

message DNAScore {
  int32 total_score = 1;
  string level = 2;
  int32 tier = 3;
  string emoji = 4;
}

message PerformanceData {
  string agent_id = 1;
  string task_id = 2;
  bool success = 3;
  float quality_score = 4;
  int64 completion_time_ms = 5;
  string user_feedback = 6;
}

message DNAEvolution {
  string agent_id = 1;
  DNAScore old_score = 2;
  DNAScore new_score = 3;
  repeated string mutations = 4;
  string reason = 5;
}

message CloneRequest {
  string source_agent_id = 1;
  string new_name = 2;
  bool mutate = 3;
}

message MutationRequest {
  string agent_id = 1;
  string mutation_type = 2;  // "random", "targeted", "extreme"
  float mutation_rate = 3;   // 0.0 to 1.0
}

message DNAPresets {
  repeated AgentDNA presets = 1;
}

message BreedRequest {
  string parent1_id = 1;
  string parent2_id = 2;
  string offspring_name = 3;
  BreedingStrategy strategy = 4;
}

message BreedingStrategy {
  string type = 1;  // "blend", "dominant", "random"
  map<string, float> trait_weights = 2;
}

// ============================================================================
// Country Agent Network
// ============================================================================

service CountryAgentNetwork {
  // Query specific country agent
  rpc QueryAgent(CountryQuery) returns (stream AgentResponse);
  
  // Broadcast to all country agents
  rpc BroadcastQuery(BroadcastQuery) returns (stream MultiAgentResponse);
  
  // Get all country agents status
  rpc GetNetworkStatus(Empty) returns (NetworkStatus);
  
  // Update agent knowledge
  rpc UpdateAgentKnowledge(KnowledgeUpdate) returns (UpdateResult);
  
  // Agent-to-agent communication
  rpc AgentCollaboration(stream AgentMessage) returns (stream AgentMessage);
}

message CountryQuery {
  string country_code = 1;
  string query = 2;
  map<string, string> context = 3;
}

message AgentResponse {
  string agent_name = 1;
  string country = 2;
  string response_type = 3;
  bytes response_data = 4;
  int32 dna_score = 5;
  int64 timestamp = 6;
}

message BroadcastQuery {
  string query = 1;
  map<string, string> context = 2;
  repeated string target_countries = 3;
}

message MultiAgentResponse {
  string country = 1;
  AgentResponse response = 2;
  bool is_final = 3;
}

message NetworkStatus {
  int32 total_agents = 1;
  int32 active_agents = 2;
  repeated CountryAgentStatus agents = 3;
}

message CountryAgentStatus {
  string country = 1;
  string status = 2;
  int32 dna_score = 3;
  int64 last_update = 4;
  map<string, int32> knowledge_counts = 5;
}

message KnowledgeUpdate {
  string country_code = 1;
  string update_type = 2;
  bytes update_data = 3;
}

message UpdateResult {
  bool success = 1;
  string message = 2;
  int32 items_updated = 3;
}

// ============================================================================
// AutomatedKit Ecosystem - 8 Specialized Kits
// ============================================================================

// TravelKit
service TravelKit {
  rpc SearchFlights(FlightSearchRequest) returns (stream FlightResult);
  rpc SearchHotels(HotelSearchRequest) returns (stream HotelResult);
  rpc CreateBooking(BookingRequest) returns (BookingConfirmation);
  rpc GetTours(TourRequest) returns (stream TourResult);
}

// ChatKit
service ChatKit {
  rpc ProcessMessage(ChatMessage) returns (ChatResponse);
  rpc StartConversation(ConversationStart) returns (stream ConversationUpdate);
  rpc GetConversationHistory(ConversationQuery) returns (ConversationHistory);
}

// WorkflowKit
service WorkflowKit {
  rpc CreateWorkflow(WorkflowDefinition) returns (WorkflowCreated);
  rpc ExecuteWorkflow(WorkflowExecution) returns (stream WorkflowProgress);
  rpc MonitorWorkflows(Empty) returns (stream WorkflowStatus);
}

// TradingKit
service TradingKit {
  rpc GetMarketData(MarketRequest) returns (stream MarketData);
  rpc ExecuteTrade(TradeOrder) returns (TradeConfirmation);
  rpc MonitorPortfolio(PortfolioQuery) returns (stream PortfolioUpdate);
}

// RestaurantKit
service RestaurantKit {
  rpc ManageReservations(ReservationRequest) returns (ReservationResponse);
  rpc UpdateMenu(MenuUpdate) returns (MenuUpdateResult);
  rpc ProcessOrder(OrderRequest) returns (stream OrderStatus);
}

// EcommerceKit
service EcommerceKit {
  rpc ManageInventory(InventoryUpdate) returns (InventoryResult);
  rpc ProcessPayment(PaymentRequest) returns (PaymentResult);
  rpc TrackShipment(ShipmentQuery) returns (stream ShipmentUpdate);
}

// HealthKit
service HealthKit {
  rpc ScheduleAppointment(AppointmentRequest) returns (AppointmentConfirmation);
  rpc ManageRecords(RecordUpdate) returns (RecordResult);
  rpc MonitorVitals(PatientQuery) returns (stream VitalSigns);
}

// EdutechKit
service EdutechKit {
  rpc EnrollStudent(EnrollmentRequest) returns (EnrollmentConfirmation);
  rpc DeliverContent(ContentRequest) returns (stream ContentDelivery);
  rpc TrackProgress(ProgressQuery) returns (stream ProgressUpdate);
}

// Placeholder messages for kit-specific operations
message FlightSearchRequest { map<string, string> params = 1; }
message FlightResult { bytes data = 1; }
message HotelSearchRequest { map<string, string> params = 1; }
message HotelResult { bytes data = 1; }
message BookingRequest { bytes data = 1; }
message BookingConfirmation { string confirmation_code = 1; }
message TourRequest { map<string, string> params = 1; }
message TourResult { bytes data = 1; }

message ChatMessage { string message = 1; map<string, string> context = 2; }
message ChatResponse { string response = 1; }
message ConversationStart { string user_id = 1; }
message ConversationUpdate { string message = 1; }
message ConversationQuery { string conversation_id = 1; }
message ConversationHistory { repeated ChatMessage messages = 1; }

message WorkflowDefinition { bytes definition = 1; }
message WorkflowCreated { string workflow_id = 1; }
message WorkflowExecution { string workflow_id = 1; }
message WorkflowProgress { int32 progress = 1; string status = 2; }
message WorkflowStatus { string workflow_id = 1; string status = 2; }

message MarketRequest { string symbol = 1; }
message MarketData { bytes data = 1; }
message TradeOrder { bytes order = 1; }
message TradeConfirmation { string order_id = 1; }
message PortfolioQuery { string user_id = 1; }
message PortfolioUpdate { bytes data = 1; }

message ReservationRequest { bytes data = 1; }
message ReservationResponse { string reservation_id = 1; }
message MenuUpdate { bytes data = 1; }
message MenuUpdateResult { bool success = 1; }
message OrderRequest { bytes data = 1; }
message OrderStatus { string status = 1; }

message InventoryUpdate { bytes data = 1; }
message InventoryResult { bool success = 1; }
message PaymentRequest { bytes data = 1; }
message PaymentResult { string transaction_id = 1; }
message ShipmentQuery { string order_id = 1; }
message ShipmentUpdate { string status = 1; }

message AppointmentRequest { bytes data = 1; }
message AppointmentConfirmation { string appointment_id = 1; }
message RecordUpdate { bytes data = 1; }
message RecordResult { bool success = 1; }
message PatientQuery { string patient_id = 1; }
message VitalSigns { bytes data = 1; }

message EnrollmentRequest { bytes data = 1; }
message EnrollmentConfirmation { string student_id = 1; }
message ContentRequest { string course_id = 1; }
message ContentDelivery { bytes content = 1; }
message ProgressQuery { string student_id = 1; }
message ProgressUpdate { float progress_percent = 1; }

