##################### Grafana Configuration #####################
#
# This is the main configuration file for Grafana
# All configuration options are documented at: https://grafana.com/docs/grafana/latest/administration/configuration/
#

[server]
# Protocol (http, https, h2, socket)
protocol = http

# The ip address to bind to, empty will bind to all interfaces
http_addr =

# The http port to use
http_port = 3000

# The public facing domain name used to access grafana from a browser
domain = localhost

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
enforce_domain = false

# The full public facing url
root_url = %(protocol)s://%(domain)s:%(http_port)s/

# Serve Grafana from subpath specified in `root_url` setting. By default it is set to `false` for compatibility reasons.
serve_from_sub_path = false

# Log web requests
router_logging = false

# the path relative working path
static_root_path = public

# enable gzip
enable_gzip = false

# https certs & key file
cert_file =
cert_key =

# Unix socket path
socket = /tmp/grafana.sock

[database]
# Database type and connection settings
type = sqlite3
# For PostgreSQL, MySQL, or SQLite3
# type = postgres
# host = localhost:5432
# name = grafana
# user = grafana
# password =
# ssl_mode = disable

# Database URL (alternative to specifying host, name, user, password separately)
url =

# Max open connections
max_open_conn = 0

# Max idle connections
max_idle_conn = 2

# Connection max lifetime
conn_max_lifetime = 14400

# Log queries slower than this value
log_queries =

# Database connection pool health check frequency
health_check_interval = 1m

[security]
# disable creation of admin user on first start of grafana
disable_initial_admin_creation = false

# default admin user, created on startup
admin_user = admin

# default admin password, can be changed before first start of grafana, not for production use!
admin_password = ${GRAFANA_ADMIN_PASSWORD:-admin}

# used for signing
secret_key = ${GRAFANA_SECRET_KEY:-SW2YcwTIb9zpOOhoPsMm}

# disable gravatar profile images
disable_gravatar = false

# data source proxy whitelist (ip_or_domain:port separated by spaces)
data_source_proxy_whitelist =

# disable protection against brute force login attempts
disable_brute_force_login_protection = false

# set to true if you want to allow browsers to render grafana in a <frame> tag
allow_embedding = false

# set secure or insecure cookie for csrf
cookie_secure = false

# set to true if you want to disable both css and js caching on the frontend
disable_frontend_js_cache = false

# Auth section
[auth]
# Login cookie name
login_cookie_name = grafana_session

# The lifetime (days) an authenticated user can be inactive before being required to login at next visit. Default is 7 days.
login_maximum_inactive_lifetime_days = 7

# The maximum lifetime (days) an authenticated user can be logged in since login time before being required to login. Default is 30 days.
login_maximum_lifetime_days = 30

# Disable username/password login
disable_login_form = false

# Disable user signup / registration
disable_user_signup = true

# Set to true to disable (hide) the signup and forgot password pages
hide_signup_page = true

# Allow users to set their own passwords
users_allow_password_change = false

# Prevent user password reset
disable_password_reset = false

# Anonymously access home dashboard
anonymous_enabled = false
anonymous_org_name = Main Org.
anonymous_org_role = Viewer

# Google authentication (OAuth)
[auth.google]
enabled = false
client_id = ${GRAFANA_GOOGLE_CLIENT_ID}
client_secret = ${GRAFANA_GOOGLE_CLIENT_SECRET}
auth_url = https://accounts.google.com/o/oauth2/auth
token_url = https://accounts.google.com/o/oauth2/token
api_url = https://www.googleapis.com/oauth2/v1/userinfo

# GitHub authentication (OAuth)
[auth.github]
enabled = false
client_id = ${GRAFANA_GITHUB_CLIENT_ID}
client_secret = ${GRAFANA_GITHUB_CLIENT_SECRET}
auth_url = https://github.com/login/oauth/authorize
token_url = https://github.com/login/oauth/access_token
api_url = https://api.github.com/user

# LDAP authentication
[auth.ldap]
enabled = false
config_file = /etc/grafana/ldap.toml

# Session configuration
[session]
# Session cookie name
cookie_name = grafana_session

# Session cookie secure
cookie_secure = false

# Session life time, default 30 days
session_life_time = 86400

# Store sessions in database instead of memory
provider = file
provider_config = sessions
cookie_secure = false

[analytics]
# Server reporting, sends usage counters to stats.grafana.org
reporting_enabled = false

# Set to false to disable all checks to https://grafana.com
check_for_updates = true

# Google Analytics universal tracking code
google_analytics_ua_id =

# Google Tag Manager ID
google_tag_manager_id =

[users]
# disable user signup / registration
allow_sign_up = false

# Allow non admin users to create organizations
allow_org_create = false

# Set to true to automatically sync users info from LDAP
auto_assign_org = true
auto_assign_org_role = Viewer

# Set to true to enable user auto deactivation on ldap sync
auto_deactivate_users = false

# Default role new users will be assigned
default_user_role = Viewer

# Default organization new users will be assigned to
default_org = Main Org.

[alerting]
enabled = false
# Execute alert rules concurrently, defaults to false
execute_alerts = true

# Default settings for new alerting rule
notification_timeout_seconds = 30

[explore]
# Enable new Explore UI
enabled = true

[unified_alerting]
enabled = true
execute_alerts = true

[annotations]
# Configures the built in annotation query sources
[annotations.dashboard]
# Dashboard annotations are already handled via API

[annotations.git]
enabled = false
user =
password =

[annotations.sensu]
enabled = false
host =
username =
password =

[annotations.postgresql]
enabled = false
host =
user =
password =
sslmode =

[annotations.influxdb]
enabled = false
host =
username =
password =

[log]
# Either "console", "file", "syslog". Default is console and file
mode = console file

# Either "trace", "debug", "info", "warn", "error", "critical", default is "info"
level = info

# optional settings to set different levels for specific loggers:
filters = alerting:debug,mysql:debug

# For "console" mode only
[log.console]
level =

# For "file" mode only
[log.file]
level =

# This enables automated log rotation. Setting rotation to "daily" will rotate logs every day at midnight.
rotation = daily

# Set max line number of single file, triggers rotation when file size too big.
max_lines = 1000000

# Max line number of rotated files to keep, set to 0 to keep all rotated files.
max_files = 10

# Cleanup interval in hours
cleanup_interval = 24

# Cleanup expired tokens
[log.cleanup]
enabled = false
older_than = 24h
interval = 1h

# Send logs to external syslog server
[log.syslog]
enabled = false
host =
protocol =
tag =

[metrics]
enabled = true
# Disable /metrics endpoint of the backed grafana server. The endpoint is enabled by default
disable_total_stats = false

# Flush interval
interval_seconds = 10

# Basic auth for /metrics endpoint
basic_auth_username =
basic_auth_password =

# Send metrics to an external influxdb or graphite
[metrics.graphite]
# Enable by setting the address setting (ex: localhost:2003)
address =
prefix =

[metrics.opentsdb]
# Enable by setting the address setting (ex: localhost:4242)
address =
prefix =

[grafana_com]
# Url for grafana.com. Default is empty, not used
url =

[snapshots]
# set to false to remove snapshot functionality
external_enabled = true

# set snapshot public mode
external_snapshot_url = https://snapshots-origin.raintank.io

# Set to true to enable this Grafana instance act as an external snapshot server and allow unauthenticated requests for creating and deleting snapshots.
external_snapshot_name = Publish to snapshots.raintank.io

# Snapshot name

# Max age of snapshot on external server
external_snapshot_expire = 365d

# Remove expired snapshot on external server at next clean up interval
external_snapshot_expire_deleted = false

# Dashboard history
[dashboards]
# Path to the default home dashboard. If this file does not exist then this setting is ignored
default_home_dashboard = /var/lib/grafana/dashboards/home.json

# number of dashboard versions to keep
versions = 10

# Max age of each dashboard version in days
max_age = 365

# Keep dashboard versions by time or count
versions_by_time = true

# For dashboards that are selected to be persisted
[dashboards.persistence]
# Enable saving dashboards in filesystem
enabled = true

# Dashboard base path where dashboards are persisted
path = /var/lib/grafana/dashboards

[plugins]
# Enter a comma-separated list of plugin identifiers to enable plugins
enable_alpha = false
# Enter a comma-separated list of plugin identifiers to disable plugins
disable =

# Install location for plugins
plugins_dir = data/plugins

# Allow unsigned plugins, DO NOT ENABLE IN PRODUCTION!
allow_loading_unsigned_plugins = false

[mailing]
# Send alerts as email?
enabled = true

# Send mail on demand?
send_on_demand = false

# SMTP settings
[mailing.smtp]
host = ${SMTP_HOST}
port = ${SMTP_PORT}
user = ${SMTP_USERNAME}
password = ${SMTP_PASSWORD}

# From address for alert emails
from_address = ${SMTP_FROM}

# From name for alert emails
from_name = Grafana

# Test email configuration by sending to this address
test_email =

[alerting.mailing]
enabled = false

[emails]
welcome_email_on_sign_up = false
templates_pattern = emails/*.html, emails/*.txt

# Set this value to true to enable a batch delete of unactivated users.
cleanup_batch_size = 100

# Cleanup interval in hours
cleanup_interval_hours = 24

# Cleanup age in hours (must be larger than cleanup interval)
cleanup_age_hours = 168

# Cleanup disabled users interval in hours
cleanup_disabled_users_interval_hours = 24

# Cleanup disabled users age in hours (must be larger than cleanup interval)
cleanup_disabled_users_age_hours = 168

# Cleanup disabled orgs interval in hours
cleanup_disabled_orgs_interval_hours = 24

# Cleanup disabled orgs age in hours (must be larger than cleanup interval)
cleanup_disabled_orgs_age_hours = 168

# InfluxDB settings for capacity planning
[influxdb]
# Enable by setting the address setting (ex: localhost:8086)
address =

[elastic]
# Elasticsearch URL for logs and metrics
url =

[provisioning]
# Create and update data sources and dashboards automatically
enabled = true

# Paths to configuration files
datasources_path = /etc/grafana/provisioning/datasources
dashboards_path = /etc/grafana/provisioning/dashboards
notifiers_path = /etc/grafana/provisioning/notifiers

# How often to check for new/updated configuration files
reload_interval = 300

# External alerts section
[external_alerts]
enabled = true

# URL for the external alerting API
url =

[home]
# Dashboard ID of the home page
dashboard_id = 1

# Query history section
[query_history]
enabled = true
days = 7

# Live Streaming
[live]
# Set to true to enable live streaming
enabled = false
allowed_origins =

# [event_publisher] section for event streaming
[event_publisher]
enabled = false

# Browser settings for user sessions
[browser]
# Max age for browser history
max_age = 7

# Enable noopener noreferrer headers
no_opener = true

# Enable nofollow headers
no_follow = true