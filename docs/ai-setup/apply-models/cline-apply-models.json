{
  "agent": {
    "id": "cline-apply-specialist",
    "name": "Cline Apply Model Specialist",
    "version": "1.0.0",
    "role": "Precise Code Diff Generator",
    "type": "apply_model_agent",
    "status": "active"
  },
  
  "identity": {
    "persona": "Specialized agent for generating precise code diffs and applying changes accurately",
    "voice": "Precise, methodical, diff-focused, accurate",
    "specialization": "Code diff generation, precise edits, change application, conflict resolution",
    "avatar": "ðŸŽ¯"
  },
  
  "apply_models": {
    "primary": {
      "name": "Morph Fast Apply",
      "provider": "morph",
      "model": "morph-fast-apply",
      "apiBase": "https://api.morphllm.com",
      "apiKey": "${MORPH_API_KEY}",
      "roles": ["apply"],
      "priority": 1,
      "speed": "fastest",
      "cost": "free_tier_available",
      "use_cases": [
        "Quick code edits",
        "Simple refactoring",
        "Fast iterations",
        "Real-time editing"
      ]
    },
    
    "secondary": {
      "name": "Relace Instant Apply",
      "provider": "relace",
      "model": "instant-apply",
      "apiBase": "https://api.relace.ai",
      "apiKey": "${RELACE_API_KEY}",
      "roles": ["apply"],
      "priority": 2,
      "speed": "very_fast",
      "cost": "paid",
      "use_cases": [
        "Complex diffs",
        "Multi-file changes",
        "Precise edits",
        "Production code"
      ]
    },
    
    "fallback": {
      "name": "Claude 3.5 Haiku",
      "provider": "anthropic",
      "model": "claude-3-5-haiku-latest",
      "apiKey": "${ANTHROPIC_API_KEY}",
      "roles": ["apply"],
      "priority": 3,
      "speed": "fast",
      "cost": "low",
      "use_cases": [
        "When specialized models unavailable",
        "Complex logic changes",
        "Context-aware edits",
        "Fallback option"
      ]
    },
    
    "experimental": {
      "name": "Claude 3.5 Sonnet",
      "provider": "anthropic",
      "model": "claude-3-5-sonnet-latest",
      "apiKey": "${ANTHROPIC_API_KEY}",
      "roles": ["apply"],
      "priority": 4,
      "speed": "moderate",
      "cost": "higher",
      "use_cases": [
        "Critical production changes",
        "Complex architectural changes",
        "High-stakes edits",
        "Maximum accuracy needed"
      ]
    }
  },
  
  "prompt_templates": {
    "default_apply": {
      "template": "Original: {{{original_code}}}\nNew: {{{new_code}}}\n\nPlease generate the final code without any markers or explanations.",
      "description": "Standard apply template for most use cases"
    },
    
    "precise_diff": {
      "template": "Generate a precise diff to transform:\n\nORIGINAL CODE:\n{{{original_code}}}\n\nINTO NEW CODE:\n{{{new_code}}}\n\nProvide only the exact changes needed, no explanations.",
      "description": "For maximum precision in diff generation"
    },
    
    "context_aware": {
      "template": "Context: This is part of {{{file_path}}}\n\nOriginal:\n{{{original_code}}}\n\nDesired:\n{{{new_code}}}\n\nGenerate the exact code to replace the original, maintaining style and conventions.",
      "description": "Includes file context for better style matching"
    },
    
    "safe_refactor": {
      "template": "Safely refactor this code:\n\nCurrent:\n{{{original_code}}}\n\nTarget:\n{{{new_code}}}\n\nEnsure no functionality is lost. Generate only the final code.",
      "description": "For refactoring with safety emphasis"
    },
    
    "minimal_change": {
      "template": "Make the MINIMAL change to transform:\n{{{original_code}}}\n\nInto:\n{{{new_code}}}\n\nChange only what's necessary. Output final code only.",
      "description": "For smallest possible diffs"
    }
  },
  
  "capabilities": {
    "core_strengths": {
      "diff_generation": 99,
      "precision_editing": 98,
      "conflict_resolution": 96,
      "style_preservation": 97,
      "multi_file_changes": 95,
      "context_awareness": 94,
      "error_recovery": 96,
      "performance": 98
    },
    
    "special_abilities": [
      "Generate precise diffs from Chat/Edit output",
      "Align changes with existing code style",
      "Handle complex multi-line edits",
      "Resolve merge conflicts intelligently",
      "Preserve code formatting and conventions",
      "Apply changes across multiple files",
      "Rollback failed applications",
      "Learn from successful patterns"
    ]
  },
  
  "workflows": {
    "simple_edit": {
      "description": "Quick single-line or simple multi-line edit",
      "model": "morph-fast-apply",
      "template": "default_apply",
      "steps": [
        "receive_edit_request",
        "generate_diff",
        "apply_changes",
        "verify_syntax"
      ],
      "estimated_time": "< 1 second"
    },
    
    "complex_refactor": {
      "description": "Complex refactoring with multiple changes",
      "model": "relace-instant-apply",
      "template": "safe_refactor",
      "steps": [
        "analyze_original_code",
        "understand_desired_changes",
        "generate_precise_diff",
        "apply_changes",
        "run_tests",
        "verify_functionality"
      ],
      "estimated_time": "2-5 seconds"
    },
    
    "multi_file_change": {
      "description": "Changes spanning multiple files",
      "model": "claude-3-5-haiku",
      "template": "context_aware",
      "steps": [
        "map_file_dependencies",
        "generate_diffs_per_file",
        "apply_in_correct_order",
        "verify_cross_file_consistency",
        "run_integration_tests"
      ],
      "estimated_time": "5-10 seconds"
    },
    
    "critical_production": {
      "description": "High-stakes production code changes",
      "model": "claude-3-5-sonnet",
      "template": "precise_diff",
      "steps": [
        "backup_original",
        "analyze_impact",
        "generate_ultra_precise_diff",
        "apply_with_verification",
        "run_full_test_suite",
        "create_rollback_point"
      ],
      "estimated_time": "10-20 seconds",
      "require_approval": true
    }
  },
  
  "model_selection_strategy": {
    "auto_select": true,
    "criteria": {
      "speed_priority": {
        "condition": "quick_iteration || real_time_editing",
        "model": "morph-fast-apply"
      },
      
      "accuracy_priority": {
        "condition": "production_code || critical_change",
        "model": "claude-3-5-sonnet"
      },
      
      "balanced": {
        "condition": "default",
        "model": "relace-instant-apply"
      },
      
      "cost_conscious": {
        "condition": "budget_limited || high_volume",
        "model": "claude-3-5-haiku"
      }
    },
    
    "fallback_chain": [
      "morph-fast-apply",
      "relace-instant-apply",
      "claude-3-5-haiku",
      "claude-3-5-sonnet"
    ]
  },
  
  "integration": {
    "with_cline": {
      "enabled": true,
      "mode": "seamless",
      "cline_requests_apply": true,
      "apply_reports_back": true,
      "shared_context": true
    },
    
    "with_continue": {
      "enabled": true,
      "config_location": ".continue/config.json",
      "auto_sync": true,
      "use_continue_models": true
    },
    
    "with_pattern_learning": {
      "enabled": true,
      "learn_from_successful_applies": true,
      "adapt_templates": true,
      "improve_accuracy": true
    }
  },
  
  "quality_assurance": {
    "pre_apply_checks": [
      "syntax_validation",
      "style_consistency",
      "import_verification",
      "type_checking"
    ],
    
    "post_apply_checks": [
      "syntax_still_valid",
      "tests_still_pass",
      "no_regressions",
      "formatting_preserved"
    ],
    
    "rollback_triggers": [
      "syntax_error",
      "test_failure",
      "type_error",
      "user_request"
    ]
  },
  
  "performance_optimization": {
    "caching": {
      "enabled": true,
      "cache_successful_patterns": true,
      "cache_duration": "24h",
      "max_cache_size": "100MB"
    },
    
    "batching": {
      "enabled": true,
      "batch_similar_changes": true,
      "max_batch_size": 10
    },
    
    "parallel_processing": {
      "enabled": true,
      "max_parallel": 5,
      "for_multi_file_changes": true
    }
  },
  
  "error_handling": {
    "on_apply_failure": {
      "action": "rollback_and_retry",
      "retry_with_different_model": true,
      "max_retries": 3,
      "notify_user": true
    },
    
    "on_syntax_error": {
      "action": "immediate_rollback",
      "analyze_error": true,
      "suggest_fix": true
    },
    
    "on_test_failure": {
      "action": "rollback_and_report",
      "run_diagnostics": true,
      "suggest_alternative": true
    }
  },
  
  "learning_system": {
    "enabled": true,
    "track_metrics": [
      "apply_success_rate",
      "average_apply_time",
      "rollback_frequency",
      "user_satisfaction",
      "model_performance"
    ],
    
    "improve_over_time": {
      "learn_user_style": true,
      "adapt_templates": true,
      "optimize_model_selection": true,
      "refine_prompts": true
    },
    
    "feedback_loop": {
      "collect_user_feedback": true,
      "analyze_failures": true,
      "share_with_pattern_agent": true
    }
  },
  
  "configuration": {
    "default_model": "morph-fast-apply",
    "default_template": "default_apply",
    "auto_apply": false,
    "require_confirmation": true,
    "show_diff_preview": true,
    "enable_rollback": true,
    "backup_before_apply": true,
    "run_tests_after_apply": true
  },
  
  "api_keys_required": {
    "morph": {
      "env_var": "MORPH_API_KEY",
      "signup_url": "https://morphllm.com/dashboard",
      "free_tier": true,
      "required": false
    },
    
    "relace": {
      "env_var": "RELACE_API_KEY",
      "signup_url": "https://app.relace.ai/settings/api-keys",
      "free_tier": false,
      "required": false
    },
    
    "anthropic": {
      "env_var": "ANTHROPIC_API_KEY",
      "signup_url": "https://console.anthropic.com",
      "free_tier": false,
      "required": true,
      "note": "Already configured in project"
    }
  },
  
  "usage_recommendations": {
    "for_quick_edits": "Use Morph Fast Apply for speed",
    "for_production": "Use Claude 3.5 Sonnet for accuracy",
    "for_refactoring": "Use Relace Instant Apply for precision",
    "for_learning": "Start with Claude 3.5 Haiku as fallback",
    "for_cost_savings": "Use Morph free tier when possible"
  },
  
  "monitoring": {
    "enabled": true,
    "log_all_applies": true,
    "track_performance": true,
    "alert_on_failures": true,
    "daily_summary": true
  }
}
