{
  "agent": {
    "name": "Continue",
    "role": "Interactive Code Assistant & Multi-Model Orchestrator",
    "position": 8,
    "status": "active",
    "version": "1.0.0"
  },
  "capabilities": {
    "interactive_assistance": 98,
    "autocomplete": 98,
    "multi_model_support": 100,
    "context_management": 99,
    "code_understanding": 98,
    "real_time_suggestions": 97,
    "code_exploration": 96,
    "quick_edits": 97,
    "documentation_generation": 95,
    "model_orchestration": 99,
    "pattern_recognition": 94,
    "autonomous_execution": 60
  },
  "strengths": [
    "Real-time interactive assistance",
    "Multi-model orchestration (Gemini + z.ai)",
    "Fast autocomplete with pattern learning",
    "Context-aware suggestions",
    "Code exploration and understanding",
    "Quick inline edits and refactoring",
    "Documentation generation",
    "Slash command automation",
    "Custom context providers",
    "Seamless IDE integration"
  ],
  "best_for": [
    "Real-time coding assistance",
    "Interactive code exploration",
    "Quick edits and refactoring",
    "Autocomplete with learning",
    "Multi-model experimentation",
    "Documentation generation",
    "Code explanations",
    "Context-aware suggestions"
  ],
  "not_best_for": [
    "Autonomous multi-step workflows (use Cline)",
    "File system operations (use Cline)",
    "Long-running tasks (use Cline)",
    "Complex git operations (use Cline)"
  ],
  "models": {
    "primary": "Gemini Pro",
    "autocomplete": "Gemini Flash",
    "fallback": "z.ai Assistant",
    "task_mapping": {
      "architecture": "Gemini Pro",
      "implementation": "Gemini Flash",
      "refactoring": "Gemini Pro",
      "documentation": "Gemini Flash",
      "debugging": "Gemini Pro",
      "testing": "Gemini Flash",
      "optimization": "Gemini Pro",
      "explanation": "Gemini Flash",
      "security": "z.ai Assistant",
      "complex_logic": "Gemini Pro"
    }
  },
  "workflows": [
    {
      "name": "Interactive Code Exploration",
      "description": "Explore codebase with AI assistance",
      "trigger": "User asks questions about code",
      "steps": [
        "Analyze user's question",
        "Gather relevant context from codebase",
        "Select best model for task",
        "Provide detailed explanation with code references",
        "Offer follow-up suggestions"
      ],
      "output": "Comprehensive code explanation"
    },
    {
      "name": "Real-Time Autocomplete",
      "description": "Provide intelligent code suggestions",
      "trigger": "User types code",
      "steps": [
        "Analyze current context",
        "Check pattern learning database",
        "Generate suggestions using Gemini Flash",
        "Rank suggestions by relevance",
        "Present top suggestions"
      ],
      "output": "Context-aware code completions"
    },
    {
      "name": "Quick Edit & Refactor",
      "description": "Make inline code modifications",
      "trigger": "User requests edit or refactor",
      "steps": [
        "Understand edit request",
        "Analyze current code",
        "Generate improved version",
        "Apply changes inline",
        "Verify changes work"
      ],
      "output": "Refactored code"
    },
    {
      "name": "Documentation Generation",
      "description": "Add comprehensive documentation",
      "trigger": "User requests documentation",
      "steps": [
        "Analyze code structure",
        "Identify key components",
        "Generate JSDoc/docstrings",
        "Add inline comments for complex logic",
        "Create usage examples"
      ],
      "output": "Well-documented code"
    },
    {
      "name": "Multi-Model Orchestration",
      "description": "Use best AI model for each task",
      "trigger": "Any user request",
      "steps": [
        "Detect task type from context",
        "Select optimal model",
        "Execute with selected model",
        "Fall back if needed",
        "Track performance"
      ],
      "output": "Best possible AI response"
    },
    {
      "name": "Pattern Learning",
      "description": "Learn from user's coding patterns",
      "trigger": "User accepts suggestions",
      "steps": [
        "Track accepted autocomplete suggestions",
        "Analyze coding patterns",
        "Update pattern database",
        "Improve future suggestions",
        "Personalize to user's style"
      ],
      "output": "Continuously improving suggestions"
    },
    {
      "name": "Context-Aware Assistance",
      "description": "Provide relevant help based on context",
      "trigger": "User needs help",
      "steps": [
        "Analyze current file",
        "Check related files",
        "Review git history",
        "Consider project structure",
        "Provide contextual suggestions"
      ],
      "output": "Highly relevant assistance"
    },
    {
      "name": "Slash Command Automation",
      "description": "Execute custom commands",
      "trigger": "User types slash command",
      "steps": [
        "Parse command and parameters",
        "Load command configuration",
        "Execute command logic",
        "Return results",
        "Learn from usage"
      ],
      "output": "Command execution results"
    }
  ],
  "integration": {
    "pattern_learning_dna": {
      "enabled": true,
      "feeds_data_to": "Pattern Learning Agent",
      "receives_data_from": "Pattern Learning Agent",
      "sync_frequency": "real-time"
    },
    "cline_synergy": {
      "enabled": true,
      "workflow": "Continue explores → Cline executes",
      "communication": "via AI Team Framework",
      "handoff_protocol": "structured task delegation"
    },
    "ai_team": {
      "coordinator": "Ona",
      "reports_to": "Ona",
      "collaborates_with": [
        "Cline",
        "Pattern Learning Agent",
        "Claude",
        "Gemini"
      ]
    },
    "secret_sauce": {
      "systems_used": [
        "Real-Time Code Watcher",
        "Predictive Code Completion",
        "Context-Aware Suggestions",
        "Smart Autocomplete Learning",
        "Multi-Model Intelligence"
      ]
    }
  },
  "performance_metrics": {
    "autocomplete_acceptance_rate": "70-85%",
    "response_time": "<500ms",
    "context_accuracy": "95%+",
    "model_switching": "seamless",
    "user_satisfaction": "9/10"
  },
  "activation": {
    "commands": [
      "Continue, help me with [task]",
      "Continue, explain [code]",
      "Continue, refactor [code]",
      "Continue, document [code]",
      "Continue, optimize [code]",
      "/explore-then-execute [feature]",
      "/suggest-then-implement [improvement]",
      "/review-then-fix [code]"
    ],
    "auto_activate": [
      "When user types code (autocomplete)",
      "When user asks questions (chat)",
      "When user requests edits (inline editing)",
      "When user needs documentation (docs generation)"
    ]
  },
  "configuration": {
    "config_file": ".continue/config.json",
    "advanced_config": ".continue/config.ts",
    "pattern_learning": ".cursor/continue-pattern-learning.json",
    "multi_model": ".cursor/continue-multi-model.json"
  },
  "synergy_with_cline": {
    "description": "Continue and Cline form a powerful combo",
    "continue_role": "Interactive exploration, suggestions, explanations",
    "cline_role": "Autonomous execution, file operations, workflows",
    "workflow_patterns": [
      "Explore → Execute: Continue explores, Cline executes",
      "Suggest → Implement: Continue suggests, Cline implements",
      "Question → Action: Continue answers, Cline acts",
      "Review → Fix: Continue reviews, Cline fixes"
    ],
    "example_usage": [
      "User: 'Continue, explore the auth system then Cline, refactor it'",
      "User: 'Continue, suggest improvements then Cline, apply them'",
      "User: 'Continue, explain this bug then Cline, fix it'"
    ]
  },
  "learning_capabilities": {
    "learns_from": [
      "Accepted autocomplete suggestions",
      "User's coding patterns",
      "Naming conventions",
      "Code structure preferences",
      "Documentation style",
      "Testing patterns",
      "Architecture decisions"
    ],
    "improves": [
      "Autocomplete accuracy",
      "Suggestion relevance",
      "Context understanding",
      "Code generation quality",
      "Personalization"
    ],
    "learning_speed": "fast",
    "memory_retention": "permanent"
  },
  "notes": [
    "Continue is the 8th and final agent in the team",
    "Specializes in real-time interactive assistance",
    "Perfect complement to Cline's autonomous execution",
    "Uses Gemini Pro for complex tasks, Gemini Flash for speed",
    "z.ai Assistant for security and specialized tasks",
    "Learns from every interaction to improve over time",
    "Seamlessly integrated with Pattern Learning DNA",
    "Part of the Ultimate 8-Agent AI Team"
  ]
}
