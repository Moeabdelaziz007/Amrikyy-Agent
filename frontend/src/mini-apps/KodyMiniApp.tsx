/**
 * Kody Mini App - AI Content Creator Agent
 * Integrates: NotebookLM, Veo3, Nano Banana (Gemini), YouTube API
 * 
 * @author Ona AI
 * @created 2025-10-21
 */

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Code,
  Video,
  FileText,
  Youtube,
  Sparkles,
  Wand2,
  Upload,
  Download,
  Send,
  Loader2,
  CheckCircle,
  AlertCircle,
  Brain,
  Film,
  BookOpen,
  Zap
} from 'lucide-react';

type ContentType = 'video' | 'article' | 'research' | 'youtube';
type AIModel = 'notebooklm' | 'veo3' | 'nano-banana' | 'gemini-pro';

interface ContentRequest {
  type: ContentType;
  topic: string;
  model: AIModel;
  style: string;
  duration?: number;
  format?: string;
}

interface ContentResult {
  status: 'success' | 'error' | 'processing';
  message: string;
  data?: {
    content?: string;
    videoUrl?: string;
    youtubeId?: string;
    transcript?: string;
    metadata?: {
      duration?: string;
      wordCount?: number;
      model?: string;
    };
  };
}

const CONTENT_TYPES = [
  {
    id: 'video' as ContentType,
    name: 'AI Video',
    nameAr: 'ŸÅŸäÿØŸäŸà ÿ∞ŸÉŸä',
    icon: <Video className="w-6 h-6" />,
    model: 'veo3' as AIModel,
    color: 'from-red-500 to-pink-600',
    description: 'Generate videos with Veo3'
  },
  {
    id: 'article' as ContentType,
    name: 'Article',
    nameAr: 'ŸÖŸÇÿßŸÑ',
    icon: <FileText className="w-6 h-6" />,
    model: 'nano-banana' as AIModel,
    color: 'from-blue-500 to-cyan-600',
    description: 'Write with Nano Banana'
  },
  {
    id: 'research' as ContentType,
    name: 'Research',
    nameAr: 'ÿ®ÿ≠ÿ´',
    icon: <BookOpen className="w-6 h-6" />,
    model: 'notebooklm' as AIModel,
    color: 'from-purple-500 to-indigo-600',
    description: 'Deep research with NotebookLM'
  },
  {
    id: 'youtube' as ContentType,
    name: 'YouTube',
    nameAr: 'ŸäŸàÿ™ŸäŸàÿ®',
    icon: <Youtube className="w-6 h-6" />,
    model: 'gemini-pro' as AIModel,
    color: 'from-rose-500 to-red-600',
    description: 'YouTube content & analytics'
  }
];

const STYLES = [
  { id: 'professional', name: 'Professional', emoji: 'üíº' },
  { id: 'casual', name: 'Casual', emoji: 'üòä' },
  { id: 'educational', name: 'Educational', emoji: 'üéì' },
  { id: 'entertaining', name: 'Entertaining', emoji: 'üé≠' },
  { id: 'technical', name: 'Technical', emoji: '‚öôÔ∏è' },
  { id: 'creative', name: 'Creative', emoji: 'üé®' }
];

export function KodyMiniApp() {
  const [selectedType, setSelectedType] = useState<ContentType>('video');
  const [request, setRequest] = useState<ContentRequest>({
    type: 'video',
    topic: '',
    model: 'veo3',
    style: 'professional',
    duration: 60,
    format: 'mp4'
  });
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState<ContentResult | null>(null);

  const handleTypeSelect = (type: ContentType) => {
    const contentType = CONTENT_TYPES.find(t => t.id === type);
    setSelectedType(type);
    setRequest({
      ...request,
      type,
      model: contentType?.model || 'gemini-pro'
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setResult({ status: 'processing', message: 'Creating content...' });

    try {
      // TODO: Replace with actual API calls
      // const response = await agentsAPI.executeTask('kody', {
      //   action: 'create_content',
      //   params: request
      // });

      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock response based on content type
      if (request.type === 'video') {
        setResult({
          status: 'success',
          message: 'Video generated successfully with Veo3!',
          data: {
            videoUrl: 'https://example.com/video.mp4',
            transcript: 'This is a sample video transcript generated by Veo3...',
            metadata: {
              duration: '1:30',
              model: 'Veo3'
            }
          }
        });
      } else if (request.type === 'article') {
        setResult({
          status: 'success',
          message: 'Article created with Nano Banana!',
          data: {
            content: `# ${request.topic}\n\nThis is a sample article generated by Gemini Nano Banana model. It demonstrates the power of on-device AI for content creation...\n\n## Key Points\n- Fast generation\n- High quality\n- Privacy-focused`,
            metadata: {
              wordCount: 250,
              model: 'Nano Banana'
            }
          }
        });
      } else if (request.type === 'research') {
        setResult({
          status: 'success',
          message: 'Research completed with NotebookLM!',
          data: {
            content: `# Research: ${request.topic}\n\n## Summary\nNotebookLM has analyzed multiple sources and generated this comprehensive research...\n\n## Key Findings\n1. Finding one\n2. Finding two\n3. Finding three`,
            metadata: {
              wordCount: 500,
              model: 'NotebookLM'
            }
          }
        });
      } else if (request.type === 'youtube') {
        setResult({
          status: 'success',
          message: 'YouTube content ready!',
          data: {
            youtubeId: 'dQw4w9WgXcQ',
            content: `# YouTube Video: ${request.topic}\n\n## Description\nOptimized description for YouTube...\n\n## Tags\n#AI #Content #Creator`,
            metadata: {
              model: 'Gemini Pro'
            }
          }
        });
      }
    } catch (error) {
      setResult({
        status: 'error',
        message: 'Failed to create content. Please try again.'
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="h-full flex flex-col bg-gradient-to-br from-slate-900 to-slate-800 text-white">
      {/* Header */}
      <div className="p-6 border-b border-slate-700/50 bg-gradient-to-r from-rose-500/10 to-red-600/10">
        <div className="flex items-center gap-3 mb-2">
          <div className="p-3 bg-gradient-to-br from-rose-500 to-red-600 rounded-xl">
            <Code className="w-6 h-6" />
          </div>
          <div>
            <h2 className="text-2xl font-bold">Kody</h2>
            <p className="text-sm text-slate-400">AI Content Creator Agent</p>
          </div>
        </div>
        <p className="text-slate-300 text-sm">
          NotebookLM ‚Ä¢ Veo3 ‚Ä¢ Nano Banana ‚Ä¢ YouTube API
        </p>
      </div>

      {/* Content */}
      <div className="flex-1 overflow-y-auto p-6">
        <div className="max-w-4xl mx-auto space-y-6">
          {/* Content Type Selection */}
          <div>
            <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
              <Sparkles className="w-5 h-5 text-rose-400" />
              Select Content Type
            </h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {CONTENT_TYPES.map((type) => (
                <motion.button
                  key={type.id}
                  type="button"
                  onClick={() => handleTypeSelect(type.id)}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className={`
                    p-4 rounded-xl border-2 transition-all duration-300
                    ${selectedType === type.id
                      ? `border-rose-500 bg-gradient-to-br ${type.color} bg-opacity-20`
                      : 'border-slate-700 bg-slate-800/50 hover:border-rose-500/50'
                    }
                  `}
                >
                  <div className="flex flex-col items-center gap-2">
                    <div className={`
                      p-3 rounded-lg bg-gradient-to-br ${type.color}
                      ${selectedType === type.id ? 'opacity-100' : 'opacity-70'}
                    `}>
                      {type.icon}
                    </div>
                    <div className="text-sm font-bold">{type.name}</div>
                    <div className="text-xs text-slate-400 font-arabic">{type.nameAr}</div>
                  </div>
                </motion.button>
              ))}
            </div>
          </div>

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Topic */}
            <div>
              <label className="block text-sm font-semibold mb-2 flex items-center gap-2">
                <Wand2 className="w-4 h-4 text-rose-400" />
                Content Topic
              </label>
              <input
                type="text"
                value={request.topic}
                onChange={(e) => setRequest({ ...request, topic: e.target.value })}
                placeholder="e.g., AI in Healthcare, Future of Technology..."
                className="w-full px-4 py-3 bg-slate-800/50 border border-slate-700 rounded-lg focus:border-rose-500 focus:ring-2 focus:ring-rose-500/20 outline-none transition-all"
                required
              />
            </div>

            {/* Style */}
            <div>
              <label className="block text-sm font-semibold mb-3">
                Content Style
              </label>
              <div className="grid grid-cols-3 md:grid-cols-6 gap-3">
                {STYLES.map(style => (
                  <button
                    key={style.id}
                    type="button"
                    onClick={() => setRequest({ ...request, style: style.id })}
                    className={`
                      p-3 rounded-lg border-2 transition-all duration-300 text-center
                      ${request.style === style.id
                        ? 'border-rose-500 bg-rose-500/20'
                        : 'border-slate-700 bg-slate-800/50 hover:border-rose-500/50'
                      }
                    `}
                  >
                    <div className="text-2xl mb-1">{style.emoji}</div>
                    <div className="text-xs font-semibold">{style.name}</div>
                  </button>
                ))}
              </div>
            </div>

            {/* Additional Options based on type */}
            {selectedType === 'video' && (
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-semibold mb-2">
                    Duration (seconds)
                  </label>
                  <input
                    type="number"
                    min="15"
                    max="300"
                    step="15"
                    value={request.duration}
                    onChange={(e) => setRequest({ ...request, duration: parseInt(e.target.value) })}
                    className="w-full px-4 py-3 bg-slate-800/50 border border-slate-700 rounded-lg focus:border-rose-500 focus:ring-2 focus:ring-rose-500/20 outline-none transition-all"
                  />
                </div>
                <div>
                  <label className="block text-sm font-semibold mb-2">
                    Format
                  </label>
                  <select
                    value={request.format}
                    onChange={(e) => setRequest({ ...request, format: e.target.value })}
                    className="w-full px-4 py-3 bg-slate-800/50 border border-slate-700 rounded-lg focus:border-rose-500 focus:ring-2 focus:ring-rose-500/20 outline-none transition-all"
                  >
                    <option value="mp4">MP4</option>
                    <option value="webm">WebM</option>
                    <option value="mov">MOV</option>
                  </select>
                </div>
              </div>
            )}

            {/* AI Model Info */}
            <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700">
              <div className="flex items-center gap-3">
                <Brain className="w-5 h-5 text-rose-400" />
                <div>
                  <p className="text-sm font-semibold">AI Model</p>
                  <p className="text-xs text-slate-400">
                    {request.model === 'veo3' && 'Google Veo3 - Advanced video generation'}
                    {request.model === 'nano-banana' && 'Gemini Nano Banana - On-device AI'}
                    {request.model === 'notebooklm' && 'NotebookLM - Research & analysis'}
                    {request.model === 'gemini-pro' && 'Gemini Pro - Multi-modal AI'}
                  </p>
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={loading}
              className="w-full py-4 bg-gradient-to-r from-rose-500 to-red-600 text-white font-bold rounded-lg hover:shadow-xl hover:shadow-rose-500/30 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {loading ? (
                <>
                  <Loader2 className="w-5 h-5 animate-spin" />
                  Creating content...
                </>
              ) : (
                <>
                  <Zap className="w-5 h-5" />
                  Create Content
                </>
              )}
            </button>
          </form>

          {/* Result */}
          <AnimatePresence>
            {result && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                {/* Status */}
                <div className={`p-6 rounded-xl border-2 ${
                  result.status === 'success'
                    ? 'bg-green-500/10 border-green-500/50'
                    : result.status === 'error'
                    ? 'bg-red-500/10 border-red-500/50'
                    : 'bg-blue-500/10 border-blue-500/50'
                }`}>
                  <div className="flex items-start gap-3">
                    {result.status === 'success' ? (
                      <CheckCircle className="w-6 h-6 text-green-400 flex-shrink-0" />
                    ) : result.status === 'error' ? (
                      <AlertCircle className="w-6 h-6 text-red-400 flex-shrink-0" />
                    ) : (
                      <Loader2 className="w-6 h-6 text-blue-400 flex-shrink-0 animate-spin" />
                    )}
                    <div>
                      <h3 className="font-bold text-lg mb-1">
                        {result.status === 'success' ? 'Content Ready!' : 
                         result.status === 'error' ? 'Error' : 'Processing...'}
                      </h3>
                      <p className="text-slate-300">{result.message}</p>
                    </div>
                  </div>
                </div>

                {/* Content Display */}
                {result.data && result.status === 'success' && (
                  <div className="space-y-4">
                    {/* Video */}
                    {result.data.videoUrl && (
                      <div className="p-6 bg-slate-800/50 rounded-xl border border-slate-700">
                        <h4 className="font-semibold mb-4 flex items-center gap-2">
                          <Film className="w-5 h-5 text-rose-400" />
                          Generated Video
                        </h4>
                        <div className="aspect-video bg-slate-900 rounded-lg flex items-center justify-center mb-4">
                          <Video className="w-16 h-16 text-slate-600" />
                        </div>
                        <button className="w-full py-2 bg-rose-500 hover:bg-rose-600 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2">
                          <Download className="w-4 h-4" />
                          Download Video
                        </button>
                      </div>
                    )}

                    {/* YouTube */}
                    {result.data.youtubeId && (
                      <div className="p-6 bg-slate-800/50 rounded-xl border border-slate-700">
                        <h4 className="font-semibold mb-4 flex items-center gap-2">
                          <Youtube className="w-5 h-5 text-red-500" />
                          YouTube Preview
                        </h4>
                        <div className="aspect-video bg-slate-900 rounded-lg flex items-center justify-center mb-4">
                          <Youtube className="w-16 h-16 text-red-500" />
                        </div>
                        <button className="w-full py-2 bg-red-500 hover:bg-red-600 rounded-lg font-semibold transition-colors">
                          Open in YouTube
                        </button>
                      </div>
                    )}

                    {/* Text Content */}
                    {result.data.content && (
                      <div className="p-6 bg-slate-800/50 rounded-xl border border-slate-700">
                        <h4 className="font-semibold mb-4 flex items-center gap-2">
                          <FileText className="w-5 h-5 text-rose-400" />
                          Generated Content
                        </h4>
                        <div className="prose prose-invert max-w-none">
                          <pre className="whitespace-pre-wrap text-sm text-slate-300 bg-slate-900 p-4 rounded-lg">
                            {result.data.content}
                          </pre>
                        </div>
                        <button className="mt-4 w-full py-2 bg-rose-500 hover:bg-rose-600 rounded-lg font-semibold transition-colors flex items-center justify-center gap-2">
                          <Download className="w-4 h-4" />
                          Download Content
                        </button>
                      </div>
                    )}

                    {/* Metadata */}
                    {result.data.metadata && (
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        {result.data.metadata.duration && (
                          <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700">
                            <p className="text-xs text-slate-400 mb-1">Duration</p>
                            <p className="text-lg font-bold text-rose-400">
                              {result.data.metadata.duration}
                            </p>
                          </div>
                        )}
                        {result.data.metadata.wordCount && (
                          <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700">
                            <p className="text-xs text-slate-400 mb-1">Word Count</p>
                            <p className="text-lg font-bold text-rose-400">
                              {result.data.metadata.wordCount}
                            </p>
                          </div>
                        )}
                        {result.data.metadata.model && (
                          <div className="p-4 bg-slate-800/50 rounded-lg border border-slate-700">
                            <p className="text-xs text-slate-400 mb-1">AI Model</p>
                            <p className="text-lg font-bold text-rose-400">
                              {result.data.metadata.model}
                            </p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}

export default KodyMiniApp;
