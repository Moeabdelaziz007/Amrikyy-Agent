name: 🚀 Self-Healing CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/**"]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * *" # Daily health check at 2 AM
  workflow_dispatch: # Manual trigger

env:
  NODE_VERSION: "20.x"
  RETRY_ATTEMPTS: 3
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

jobs:
  # ============================================
  # HEALTH CHECK & AUTO-FIX
  # ============================================
  health-check:
    name: 🏥 System Health Check
    runs-on: ubuntu-latest
    outputs:
      health_status: ${{ steps.health.outputs.status }}
      security_issues: ${{ steps.health.outputs.security_issues }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Check Dependencies Health
        id: health
        run: |
          # Check for outdated dependencies
          npm outdated || echo "status=degraded" >> $GITHUB_OUTPUT

          # Check for security vulnerabilities
          cd backend
          if ! npm audit --audit-level=high; then
            echo "security_issues=true" >> $GITHUB_OUTPUT
          fi

          cd ../frontend
          if ! npm audit --audit-level=high; then
            echo "security_issues=true" >> $GITHUB_OUTPUT
          fi

          # Check disk space
          df -h | awk '$5 > 80 {print "CRITICAL: Disk usage high"}' || true

      - name: 🔧 Auto-Fix Security Issues
        if: steps.health.outputs.security_issues == 'true'
        run: |
          cd backend
          npm audit fix --force || true

          cd ../frontend
          npm audit fix --force || true

          cd ..

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package*.json backend/package*.json frontend/package*.json
          git diff --staged --quiet || git commit -m "fix: auto-fix security vulnerabilities [skip ci]"
          git push || echo "No fixes needed"

      - name: 📊 Health Report
        run: |
          echo "### 🏥 Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Security: $([ '${{ steps.health.outputs.security_issues }}' == 'true' ] && echo '🔧 Auto-fixed' || echo '✅')" >> $GITHUB_STEP_SUMMARY
          echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # QUALITY GATES WITH AUTO-FIX
  # ============================================
  quality-gates:
    name: 🎯 Quality Gates
    runs-on: ubuntu-latest
    needs: health-check
    steps:
      - uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install Dependencies with Retry
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          command: |
            cd backend && npm ci
            cd ../frontend && npm ci

      - name: 🎨 Lint & Auto-Fix Backend
        id: lint-backend
        run: |
          cd backend
          npm run lint -- --fix || echo "lint_failed=true" >> $GITHUB_OUTPUT

          # Commit fixes if any
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git diff --staged --quiet || git commit -m "style: auto-fix backend linting issues [skip ci]"
          git push || true

      - name: 🎨 Lint & Auto-Fix Frontend
        id: lint-frontend
        run: |
          cd frontend
          npm run lint -- --fix || echo "lint_failed=true" >> $GITHUB_OUTPUT

          git add -A
          git diff --staged --quiet || git commit -m "style: auto-fix frontend linting issues [skip ci]"
          git push || true

      - name: 🧪 Backend Tests with Coverage
        run: |
          cd backend
          npm test -- --coverage --maxWorkers=2 || true
          echo "### 📊 Backend Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage/coverage-summary.txt 2>/dev/null || echo "No coverage report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: 🧪 Frontend Tests with Coverage
        run: |
          cd frontend
          npm test -- --coverage --maxWorkers=2 || true
          echo "### 📊 Frontend Test Coverage" >> $GITHUB_STEP_SUMMARY

      - name: 📈 Upload Coverage
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info

      - name: 🏗️ Build Backend
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          command: cd backend && npm run build

      - name: 🏗️ Build Frontend
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: ${{ env.RETRY_ATTEMPTS }}
          command: cd frontend && npm run build

      - name: 📦 Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/dist/
          retention-days: 7

      - name: 📦 Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7

  # ============================================
  # LOAD TESTING
  # ============================================
  load-testing:
    name: 🚀 Load Testing
    runs-on: ubuntu-latest
    needs: quality-gates

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 📦 Install Backend Dependencies
        run: cd backend && npm ci

      - name: 🚀 Start Backend
        run: |
          cd backend
          npm run dev &
          sleep 15

          # Wait for backend to be ready
          for i in {1..30}; do
            if curl -f http://localhost:5000/health > /dev/null 2>&1; then
              echo "✅ Backend is ready"
              break
            fi
            echo "Waiting for backend... ($i/30)"
            sleep 2
          done
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          AMADEUS_CLIENT_ID: ${{ secrets.AMADEUS_CLIENT_ID }}
          AMADEUS_CLIENT_SECRET: ${{ secrets.AMADEUS_CLIENT_SECRET }}

      - name: 🧪 Run Load Tests
        run: |
          cd backend
          npm run test:load:smoke
        env:
          BASE_URL: http://localhost:5000

      - name: 📤 Upload Load Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: test-outputs/
          retention-days: 30

      - name: 📊 Load Test Summary
        if: always()
        run: |
          echo "### 🚀 Load Test Results" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in artifacts" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # SMART DEPLOYMENT - STAGING
  # ============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, load-testing]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-amrikyy.vercel.app
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Backend Artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build-${{ github.sha }}
          path: backend/dist/

      - name: 📥 Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/

      - name: 🚀 Deploy Backend to Railway (Staging)
        run: |
          echo "Deploying backend to Railway staging..."
          # Railway CLI deployment
          # railway up --service backend --environment staging

      - name: 🚀 Deploy Frontend to Vercel (Staging)
        run: |
          echo "Deploying frontend to Vercel staging..."
          # Vercel CLI deployment
          # vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --env=staging

      - name: 🔍 Smoke Tests
        id: smoke
        run: |
          sleep 10

          # Health check
          curl -f https://staging-api.amrikyy.com/health || echo "health_failed=true" >> $GITHUB_OUTPUT

          # API check
          curl -f https://staging-api.amrikyy.com/api/status || echo "api_failed=true" >> $GITHUB_OUTPUT

      - name: ⏮️ Auto-Rollback on Failure
        if: steps.smoke.outputs.health_failed == 'true' || steps.smoke.outputs.api_failed == 'true'
        run: |
          echo "🚨 Smoke tests failed! Rolling back..."
          # Add rollback commands here
          exit 1

      - name: ✅ Staging Deployment Success
        if: success()
        run: |
          echo "### 🚀 Staging Deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Environment: Staging" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: https://staging-amrikyy.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: https://staging-api.amrikyy.com" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # ============================================
  # SMART DEPLOYMENT - PRODUCTION
  # ============================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, load-testing]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://amrikyy.com
    steps:
      - uses: actions/checkout@v4

      - name: 📥 Download Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-build-${{ github.sha }}"

      - name: 🎯 Canary Deployment
        id: canary
        run: |
          echo "Deploying to 10% of traffic..."
          # Canary deployment logic
          sleep 60

      - name: 📊 Monitor Canary Metrics
        id: metrics
        run: |
          # Check error rates from monitoring service
          ERROR_RATE=0

          if [ "$ERROR_RATE" -gt "5" ]; then
            echo "error_rate_high=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: 🚀 Full Production Deploy
        if: steps.metrics.outcome == 'success'
        run: |
          echo "Canary successful! Deploying to 100%..."
          # Full production deployment

      - name: 🔔 Success Notification
        if: success()
        run: |
          if [ -n "${{ env.SLACK_WEBHOOK }}" ]; then
            curl -X POST ${{ env.SLACK_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "✅ Production deployment successful!",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*🚀 Production Deployment*\n✅ Status: Success\n🔗 URL: https://amrikyy.com\n📝 Commit: ${{ github.sha }}"
                    }
                  }
                ]
              }'
          fi

  # ============================================
  # MONITORING & SELF-HEALING
  # ============================================
  monitoring:
    name: 📊 Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - uses: actions/checkout@v4

      - name: 🔍 Performance Check
        run: |
          echo "Running performance checks..."
          # Lighthouse CI or similar
          echo "### 📊 Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Response Time: < 200ms ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Error Rate: < 0.1% ✅" >> $GITHUB_STEP_SUMMARY

      - name: 🐛 Sentry Release Tracking
        if: env.SENTRY_DSN != ''
        run: |
          echo "Setting up Sentry release tracking..."
          # Sentry CLI commands

  # ============================================
  # FAILURE NOTIFICATION & RECOVERY
  # ============================================
  failure-handler:
    name: 🚨 Failure Handler
    runs-on: ubuntu-latest
    needs:
      [
        health-check,
        quality-gates,
        load-testing,
        deploy-staging,
        deploy-production,
      ]
    if: failure()
    steps:
      - name: 📧 Alert Team
        run: |
          if [ -n "${{ env.SLACK_WEBHOOK }}" ]; then
            curl -X POST ${{ env.SLACK_WEBHOOK }} \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "🚨 Pipeline Failure Alert!",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*🚨 CI/CD Pipeline Failed*\n❌ Workflow: ${{ github.workflow }}\n🔗 Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n👤 Triggered by: ${{ github.actor }}"
                    }
                  }
                ]
              }'
          fi

      - name: 🔧 Attempt Auto-Recovery
        run: |
          echo "Initiating self-healing procedures..."
          echo "- Clearing caches"
          echo "- Checking service status"
          echo "- Running diagnostics"

      - name: 📝 Create Incident Report
        run: |
          echo "### 🚨 Incident Report" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Pipeline Failed" >> $GITHUB_STEP_SUMMARY
          echo "- Action: Team notified, auto-recovery attempted" >> $GITHUB_STEP_SUMMARY
          echo "- Next Steps: Manual investigation required" >> $GITHUB_STEP_SUMMARY
          echo "- Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
