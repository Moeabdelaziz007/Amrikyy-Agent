name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend tests
      working-directory: ./backend
      run: npm test

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: amrikyy-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./backend

        # Push images
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

        # Export image URI for deployment
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster amrikyy-cluster \
          --service amrikyy-backend-service \
          --force-new-deployment \
          --region us-east-1

    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster amrikyy-cluster \
          --services amrikyy-backend-service \
          --region us-east-1

    - name: Run health check
      run: |
        # Wait for service to be healthy
        sleep 30

        # Check backend health endpoint
        HEALTH_URL="https://api.amrikyy.com/api/health"
        MAX_RETRIES=10
        RETRY_COUNT=0

        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          if curl -f -s "$HEALTH_URL" > /dev/null; then
            echo "‚úÖ Backend deployment successful!"
            break
          else
            echo "‚è≥ Waiting for backend to be healthy... (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            sleep 30
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done

        if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
          echo "‚ùå Backend health check failed after $MAX_RETRIES attempts"
          exit 1
        fi

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:unit

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'
        working-directory: ./frontend

  deploy-telegram-bot:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Deploy Telegram Bot
      run: |
        # Set production environment variables
        export TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
        export NODE_ENV=production

        # Start the bot (assuming it's configured to run in production)
        npm run start:bot
      working-directory: ./backend

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-telegram-bot]
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run smoke tests
      run: |
        # Test frontend accessibility
        curl -f https://amrikyy.com > /dev/null

        # Test backend API
        curl -f https://api.amrikyy.com/api/health > /dev/null

        # Test Telegram bot (if webhook is accessible)
        # Add bot health check here

        echo "‚úÖ All smoke tests passed!"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-telegram-bot, post-deployment-tests]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && \
           [ "${{ needs.deploy-frontend.result }}" == "success" ] && \
           [ "${{ needs.deploy-telegram-bot.result }}" == "success" ] && \
           [ "${{ needs.post-deployment-tests.result }}" == "success" ]; then
          echo "üéâ Production deployment successful!"
          # Add success notification (Slack, Discord, email, etc.)
        else
          echo "‚ùå Production deployment failed!"
          # Add failure notification
          exit 1
        fi

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-telegram-bot, post-deployment-tests]
    if: failure()

    steps:
    - name: Rollback deployment
      run: |
        echo "üö® Deployment failed - initiating rollback procedures"
        # Add rollback logic here
        # Could trigger previous successful deployment or manual intervention