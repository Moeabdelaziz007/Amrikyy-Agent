name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci

    - name: Setup test environment
      run: |
        echo "Setting up test environment variables"
        echo "TEST_SUPABASE_URL=http://localhost:54321" >> $GITHUB_ENV
        echo "TEST_SUPABASE_SERVICE_ROLE_KEY=test-service-role-key" >> $GITHUB_ENV
        echo "TEST_SUPABASE_ANON_KEY=test-anon-key" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "TEST_DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
        echo "TEST_REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
        echo "TEST_OPENAI_API_KEY=test-openai-key" >> $GITHUB_ENV
        echo "TEST_STRIPE_SECRET_KEY=test-stripe-key" >> $GITHUB_ENV
        echo "TEST_TELEGRAM_BOT_TOKEN=test-telegram-token" >> $GITHUB_ENV
        
    - name: Type check
      run: |
        cd frontend && npm run type-check
        
    - name: Lint
      run: |
        cd frontend && npm run lint
        
    - name: Format check
      run: |
        cd frontend && npm run format:check
        
    - name: Unit tests
      run: |
        cd frontend && npm run test:coverage

    - name: Backend tests
      run: |
        cd backend && npm run test:ci

    - name: Build
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build

    - name: E2E tests
      run: |
        cd frontend && npm run e2e:ci

    - name: Accessibility tests
      run: |
        cd frontend && npm run a11y-check
        
    - name: Security audit
      run: |
        npm audit --audit-level high
        cd frontend && npm audit --audit-level high
        cd ../backend && npm audit --audit-level high
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info,./backend/coverage/lcov.info
        flags: frontend,backend
        name: full-coverage
        fail_ci_if_error: false
        
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        
    - name: Build for production
      run: |
        cd frontend && npm run build
        
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./frontend
