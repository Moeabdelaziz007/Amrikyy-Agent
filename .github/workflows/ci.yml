name: CI Pipeline

on:
  push:
    branches: [ main, pr-* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install root dependencies
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: ./frontend
      run: npm run type-check

    - name: Run frontend unit tests
      working-directory: ./frontend
      run: npm run test:unit

    - name: Run backend tests
      working-directory: ./backend
      run: npm test

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          frontend/test-output.log
          backend/test-output.log
          frontend/coverage/
        retention-days: 30

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run frontend security audit
      working-directory: ./frontend
      run: npm audit --audit-level moderate

    - name: Run backend security audit
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/pr-'))

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-results
        path: frontend/playwright-report/
        retention-days: 30

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build for production
      working-directory: ./frontend
      run: npm run build

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: http://localhost:3000
        configPath: .lighthouserc.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, e2e-tests, performance]
    if: always()

    steps:
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.e2e-tests.result == 'failure'
      run: |
        echo "Pipeline failed - check the logs above for details"
        # Add notification logic here (Slack, Discord, etc.)

    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.e2e-tests.result == 'success'
      run: |
        echo "All checks passed successfully!"
        # Add success notification logic here