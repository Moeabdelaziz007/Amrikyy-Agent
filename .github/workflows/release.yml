name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run full test suite
      run: |
        cd frontend && npm run test:unit
        cd ../backend && npm test

    - name: Build applications
      run: |
        cd frontend && npm run build
        cd ../backend && npm run build

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        CURRENT_TAG=${GITHUB_REF#refs/tags/}

        echo "Generating changelog from $LATEST_TAG to $CURRENT_TAG"

        # Generate changelog using git log
        CHANGELOG=$(git log --pretty=format:"* %s (%h)" $LATEST_TAG..HEAD | head -20)

        if [ -z "$CHANGELOG" ]; then
          CHANGELOG="* No changes since last release"
        fi

        # Escape newlines for GitHub output
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## 🚀 Amrikyy Travel Agent ${{ github.ref_name }}

          ### 📋 Release Notes

          ${{ steps.changelog.outputs.changelog }}

          ### 🔧 Deployment Information

          **Frontend:** Deployed to Vercel
          **Backend:** Deployed to AWS ECS
          **Database:** Supabase Production
          **CDN:** Vercel Edge Network

          ### 🧪 Testing Results

          - ✅ Unit tests: All passing
          - ✅ Integration tests: All passing
          - ✅ E2E tests: All passing
          - ✅ Security audit: Passed
          - ✅ Performance tests: Passed

          ### 📦 Downloads

          - [Frontend Build](https://amrikyy.com) - Live application
          - [API Documentation](https://api.amrikyy.com/docs) - OpenAPI spec
          - [Source Code](https://github.com/${{ github.repository }}/archive/${{ github.ref }}.zip) - Complete source

          ### 🤝 Contributors

          Thanks to all contributors who made this release possible!

          ---
          *This release was automatically created by GitHub Actions.*
        draft: false
        prerelease: false

    - name: Build and upload release assets
      run: |
        # Create release artifacts directory
        mkdir -p release-artifacts

        # Copy build artifacts
        cp -r frontend/dist release-artifacts/frontend-build
        cp -r backend/dist release-artifacts/backend-build 2>/dev/null || echo "No backend dist found"

        # Create deployment documentation
        cat > release-artifacts/DEPLOYMENT_README.md << 'EOF'
        # 🚀 Amrikyy Travel Agent Deployment Guide

        ## Prerequisites
        - Node.js 18+
        - npm or yarn
        - AWS CLI configured (for backend deployment)
        - Vercel CLI (for frontend deployment)

        ## Quick Deploy

        ### Frontend (Vercel)
        ```bash
        cd frontend
        npm ci
        npm run build
        vercel --prod
        ```

        ### Backend (AWS ECS)
        ```bash
        cd backend
        npm ci
        npm run build
        # Deploy to ECS using your CI/CD pipeline
        ```

        ## Environment Variables Required

        See .env.example files in respective directories for required environment variables.

        ## Support

        For deployment issues, please check:
        - GitHub Issues
        - Documentation at https://docs.amrikyy.com
        - Support email: support@amrikyy.com
        EOF

        # Create source code archive
        git archive --format=zip --output=release-artifacts/source-code.zip HEAD

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/source-code.zip
        asset_name: amrikyy-source-${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload deployment documentation
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-artifacts/DEPLOYMENT_README.md
        asset_name: DEPLOYMENT_README.md
        asset_content_type: text/markdown

    - name: Notify release completion
      run: |
        echo "🎉 Release ${{ github.ref_name }} created successfully!"
        echo "📦 Assets uploaded to GitHub Releases"
        echo "🚀 Ready for production deployment"
        # Add notification logic here (Slack, Discord, email, etc.)

  update-production:
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update production version
      run: |
        # This would trigger your production deployment workflow
        # For example, you could call another workflow or deployment script

        echo "🚀 Triggering production deployment for version ${{ github.ref_name }}"

        # Example: Trigger production deployment
        # curl -X POST \
        #   -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
        #   -H "Accept: application/vnd.github.v3+json" \
        #   https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy.yml/dispatches \
        #   -d '{"ref":"main","inputs":{"environment":"production","version":"${{ github.ref_name }}"}}'

        echo "✅ Production deployment triggered"